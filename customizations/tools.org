* Package
** package sources
#+begin_src emacs-lisp

    (require 'package)

    ;; (custom-set-variables '(package-archives '(
    ;;                          ("melpa-stable" . "http://stable.melpa.org/packages/")
    ;;                          ("org" . "https://orgmode.org/elpa/")
    ;;                          ("gnu-devel" . "https://elpa.gnu.org/devel/")
    ;;                          )))

;; Emacs Lisp Package Archive (ELPA)
;; @see https://github.com/melpa/melpa and https://elpa.emacs-china.org/.
(defcustom centaur-package-archives-alist
  (let ((proto (if (gnutls-available-p) "https" "http")))
    `((melpa    . (("gnu"    . ,(format "%s://elpa.gnu.org/packages/" proto))
                   ("nongnu" . ,(format "%s://elpa.nongnu.org/nongnu/" proto))
                   ("melpa"  . ,(format "%s://melpa.org/packages/" proto))))
      (bfsu     . (("gnu"    . ,(format "%s://mirrors.bfsu.edu.cn/elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirrors.bfsu.edu.cn/elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirrors.bfsu.edu.cn/elpa/melpa/" proto))))
      (iscas    . (("gnu"    . ,(format "%s://mirror.iscas.ac.cn/elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirror.iscas.ac.cn/elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirror.iscas.ac.cn/elpa/melpa/" proto))))
      (netease  . (("gnu"    . ,(format "%s://mirrors.163.com/elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirrors.163.com/elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirrors.163.com/elpa/melpa/" proto))))
      (sjtu     . (("gnu"    . ,(format "%s://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/melpa/" proto))))
      (tuna     . (("gnu"    . ,(format "%s://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/" proto))))
      (ustc     . (("gnu"    . ,(format "%s://mirrors.ustc.edu.cn/elpa/gnu/" proto))
                   ("nongnu" . ,(format "%s://mirrors.ustc.edu.cn/elpa/nongnu/" proto))
                   ("melpa"  . ,(format "%s://mirrors.ustc.edu.cn/elpa/melpa/" proto))))))
  "A list of the package archives."
  :group 'centaur
  :type '(alist :key-type (symbol :tag "Archive group name")
                :value-type (alist :key-type (string :tag "Archive name")
                                   :value-type (string :tag "URL or directory name"))))

(defcustom centaur-package-archives 'melpa
  "Set package archives from which to fetch."
  :group 'centaur
  :set (lambda (symbol value)
         (set symbol value)
         (setq package-archives
               (or (alist-get value centaur-package-archives-alist)
                   (error "Unknown package archives: `%s'" value))))
  :type `(choice ,@(mapcar
                    (lambda (item)
                      (let ((name (car item)))
                        (list 'const
                              :tag (capitalize (symbol-name name))
                              name)))
                    centaur-package-archives-alist)))


;; Pakcage repository (ELPA)
(defun set-package-archives (archives &optional refresh async no-save)
  "Set the package ARCHIVES (ELPA).

REFRESH is non-nil, will refresh archive contents.
ASYNC specifies whether to perform the downloads in the background.;; A comprehensive visual interface to diff & patch
(use-package ediff
  :ensure nil
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; reStore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        ediff-merge-split-window-function 'split-window-horizontally));; A comprehensive visual interface to diff & patch
(use-package ediff
  :ensure nil
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; reStore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        ediff-merge-split-window-function 'split-window-horizontally));; A comprehensive visual interface to diff & patch
(use-package ediff
  :ensure nil
  :hook(;; show org ediffs unfolded
        (ediff-prepare-buffer . outline-show-all)
        ;; reStore window layout when done
        (ediff-quit . winner-undo))
  :config
  (setq ediff-window-setup-function 'ediff-setup-windows-plain
        ediff-split-window-function 'split-window-horizontally
        ediff-merge-split-window-function 'split-window-horizontally))
Save to option `custom-file' if NO-SAVE is nil."
  (interactive
   (list
    (intern
     (completing-read "Select package archives: "
                      (mapcar #'car centaur-package-archives-alist)))))
  ;; Set option
  (custom-set-variables '(centaur-archives-package archives))

  ;; Refresh if need
  (and refresh (package-refresh-contents async))

  (message "Set package archives to `%s'" archives))

;; Refer to https://emacs-china.org/t/elpa/11192
(defun centaur-test-package-archives (&optional no-chart)
  "Test connection speed of all package archives and display on chart.

Not displaying the chart if NO-CHART is non-nil.
Return the fastest package archive."
  (interactive)

  (let* ((durations (mapcar
                     (lambda (pair)
                       (let ((url (concat (cdr (nth 2 (cdr pair)))
                                          "archive-contents"))
                             (start (current-time)))
                         (message "Fetching %s..." url)
                         (ignore-errors
                           (url-copy-file url null-device t))
                         (float-time (time-subtract (current-time) start))))
                     centaur-package-archives-alist))
         (fastest (car (nth (cl-position (apply #'min durations) durations)
                            centaur-package-archives-alist))))

    ;; Display on chart
    (when (and (not no-chart)
               (require 'chart nil t)
               (require 'url nil t))
      (chart-bar-quickie
       'vertical
       "Speed test for the ELPA mirrors"
       (mapcar (lambda (p) (symbol-name (car p))) centaur-package-archives-alist)
       "ELPA"
       (mapcar (lambda (d) (* 1e3 d)) durations) "ms"))

    (message "`%s' is the fastest package archive" fastest)

    ;; Return the fastest
    fastest))
#+end_src

#+RESULTS:




** package install

#+begin_src emacs-lisp


;; Required by `use-package'
(use-package diminish :ensure t)

;; Update GPG keyring for GNU ELPA
(use-package gnu-elpa-keyring-update)

;; Update packages
(unless (fboundp 'package-upgrade-all)
  (use-package auto-package-update
    :init
    (setq auto-package-update-delete-old-versions t
          auto-package-update-hide-results t)
    (defalias 'package-upgrade-all #'auto-package-update-now)))

  (use-package auto-compile
    :defer nil
    :config (auto-compile-on-load-mode))

  ;; optimize for build-in :vc to avoid long time deep clone with all package's history
  (defun my/vc-git-clone (fn remote directory rev)
    (if (or (not (string-match-p "elpa" directory))
            (null rev))
        (funcall fn remote directory rev)
      (cond
       ((ignore-errors
          ;; First try if rev is a branch/tag name
          ;; https://stackoverflow.com/a/48748567/2163429
          (vc-git--out-ok "clone" "--depth" "1" "--single-branch" "--branch" rev remote directory)))
       ((vc-git--out-ok "clone" "--single-branch" remote directory)
        (let ((default-directory directory))
          (vc-git--out-ok "checkout" rev))))
      directory))

  (advice-add 'vc-git-clone :around
              'my/vc-git-clone)

  ;; install the required packages
  ;; Set missing package vars
  (defvar lem-missing-packages '()
    "List populated at startup containing packages needing installation.")
  (defvar lem-missing-vc-packages '()
    "List populated at startup containing vc packages requiring installation.")

  ;; Check for packages
  (defun lem-check-missing-packages ()
    "Check for missing packages."
    (interactive)
    ;; Check packages
    (message "%s" "Checking for missing packages.")
    (dolist (p package-selected-packages)
      (unless (package-installed-p p)
        (add-to-list 'lem-missing-packages p 'append)))
    ;; Check vc installed packages (Emacs 29+)
    (when (version< "29" emacs-version)
      (message "%s" "Checking for missing vc packages.")
      (dolist (p package-vc-selected-packages)
        (unless (package-installed-p (car p))
          (add-to-list 'lem-missing-vc-packages (car p) 'append)))))

  ;; Install packages
  (defun lem-install-missing-packages ()
    "Install missing packages from package & package-vc lists."
    (interactive)
    (lem-check-missing-packages)
    (cond ((or lem-missing-packages
               lem-missing-vc-packages)
           (message "Refreshing package database & installing missing packages...")
           (package-install-selected-packages t)
           (setq lem-missing-packages '())
           (package-vc-install-selected-packages)
           (setq lem-missing-vc-packages '()))
          (t
           (message "No missing packages."))))

#+end_src
** modules loading
#+begin_src emacs-lisp

   ;; (require 'shell-integration)
   ;; (require 'init-site-lisp)
   (require 'init-core-overriding)
   ;; ;; Langauage-specific
   ;; (require 'elisp-editing)
   ;; (require 'init-minibuffer-completion)
  (require 'init-org)
#+end_src
* Editing & KeyBinding
** editing
#+begin_src emacs-lisp
  (when *IS-MAC*
    ;; modify meta from ⌥ to ⌘
    (custom-set-variables
     '(mac-command-modifier 'meta)
     '(mac-option-modifier 'super)
     ;; '(mac-option-modifier 'alt)
     ;; '(mac-right-option-modifier 'super)
     )
    (bind-keys ([(super l)] . goto-line))
    ;; Make mouse wheel / trackpad scrolling less jerky
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5) ((control))))
    (dolist (multiple '("" "double-" "triple-"))
      (dolist (direction '("right" "left"))
        (global-set-key (read-kbd-macro (concat "<" multiple "wheel-" direction ">")) 'ignore)))
    (use-package exec-path-from-shell
      :defer t
      :config
      (exec-path-from-shell-initialize))
    )

  ;; Frame
  (when (display-graphic-p)
    ;; Frame fullscreen
    (add-hook 'window-setup-hook #'fix-fullscreen-cocoa)
    ;; Frame transparence
    (use-package transwin
      :bind (("C-M-9" . transwin-inc)
             ("C-M-8" . transwin-dec)
             ("C-M-7" . transwin-toggle))
      :init
      (when *IS-LINUX*
        (setq transwin-parameter-alpha 'alpha-background))))

  ;; PERF
  ;; Garbage Collector Magic Hack
  (use-package gcmh
    :diminish
    :hook (emacs-startup . gcmh-mode)
    :init
    (setq gcmh-idle-delay 'auto
          gcmh-auto-idle-delay-factor 10
          gcmh-high-cons-threshold #x1000000)) ; 16MB


  ;; A comprehensive visual interface to diff & patch
  (use-package ediff
    :ensure nil
    :hook(;; show org ediffs unfolded
          (ediff-prepare-buffer . outline-show-all)
          ;; reStore window layout when done
          (ediff-quit . winner-undo))
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
          ediff-split-window-function 'split-window-horizontally
          ediff-merge-split-window-function 'split-window-horizontally))


     (use-package vundo
        :bind ("C-x u" . vundo)
        :config (setq vundo-glyph-alist vundo-unicode-symbols))

  ;; auto completion of function name/path/file name
    (bind-key "C-<tab>" 'hippie-expand)
    ;; (global-set-key "\M- " 'hippie-expand)
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol))

    ;; Don't use hard tabs
    (setq-default indent-tabs-mode nil)
    (set-variable 'tab-width 8)

    ;; When you visit a file, point goes to the last place where it
    ;; was when you previously visited the same file.
    ;; http://www.emacswiki.org/emacs/SavePlace
    (use-package saveplace
      :defer nil
      :config
      (save-place-mode)
      (setq save-place-file (concat user-emacs-directory "places")))

  ;; History
  (use-package recentf
    :bind (("C-x C-r" . recentf-open-files))
    :hook (after-init . recentf-mode)
    :init (setq recentf-max-saved-items 300
                recentf-exclude
                '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                  "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                  "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                  "^/tmp/" "^/var/folders/.+$" "^/ssh:" "/persp-confs/"
                  (lambda (file) (file-in-directory-p file package-user-dir))))
    :config
    (push (expand-file-name recentf-save-file) recentf-exclude)
    (add-to-list 'recentf-filename-handlers #'abbreviate-file-name))

    ;; Emacs can automatically create backup files. This tells Emacs to
    ;; put all backups in ~/.emacs.d/backups. More info:
    ;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                   "backups"))))

    (use-package evil-nerd-commenter
      :bind ("M-;" . evilnc-comment-or-uncomment-lines))

    (delete-selection-mode t)

    ;; fix weird os x kill error
    (defun ns-get-pasteboard ()
      "Returns the value of the pasteboard, or nil for unsupported formats."
      (condition-case nil
          (ns-get-selection-internal 'CLIPBOARD)
        (quit nil)))

    ;;disable electri
    (setq electric-indent-mode nil)

    ;;scroll down multiple lines
    (defun previous-multilines ()
      (interactive)
      (scroll-down (/ (window-body-height) 3)))

    (defun next-multilines ()
      "scroll up multiple lines"
      (interactive)
      (scroll-up (/ (window-body-height) 3)))

    (global-set-key "\M-n" 'next-multilines)
    (global-set-key "\M-p" 'previous-multilines)
    ;; Move line up
    (defun move-line-up ()
      (interactive)
      (transpose-lines 1)
      (previous-line 2))

    ;; Move line down
    (defun move-line-down ()
      (interactive)
      (next-line 1)
      (transpose-lines 1)
      (previous-line 1))

    ;; Assign the custom keybindings
    (global-set-key (kbd "M-<up>") 'move-line-up)
    (global-set-key (kbd "M-<down>") 'move-line-down)

    (global-set-key (kbd "M-o") 'other-window)
    (windmove-default-keybindings)

    (global-set-key (kbd "C-x g") 'magit-status)
    ;; Shift lines up and down withM-up and M-down. When paredit is enabled,
    ;; it will use those keybindings. For this reason, you might prefer to
    ;; use M-S-up and M-S-down, which will work even in lisp modes.


    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("g" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))

    (require 'meow)
    (meow-setup)
    (meow-global-mode 1)


    (use-package browse-url
      :ensure nil
      :defines dired-mode-map
      :bind (("C-c C-z ." . browse-url-at-point)
             ("C-c C-z b" . browse-url-of-buffer)
             ("C-c C-z r" . browse-url-of-region)
             ("C-c C-z u" . browse-url)
             ("C-c C-z e" . browse-url-emacs)
             ("C-c C-z v" . browse-url-of-file))
      :init
      (with-eval-after-load 'dired
        (bind-key "C-c C-z f" #'browse-url-of-file dired-mode-map)))

    ;; Click to browse URL or to send to e-mail address
    (use-package goto-addr
      :ensure nil
      :hook ((text-mode . goto-address-mode)
             (prog-mode . goto-address-prog-mode)
             (org-mode . goto-address-mode)))

    ;; Edit multiple regions in the same way simultaneously
    (use-package iedit
      :defines desktop-minor-mode-table
      :bind (("C-;" . iedit-mode)
             ("C-x r RET" . iedit-rectangle-mode)
             :map isearch-mode-map ("C-;" . iedit-mode-from-isearch)
             :map esc-map ("C-;" . iedit-execute-last-modification)
             :map help-map ("C-;" . iedit-mode-toggle-on-function))
      :config
      ;; Avoid restoring `iedit-mode'
      (with-eval-after-load 'desktop
        (add-to-list 'desktop-minor-mode-table
                     '(iedit-mode nil))))

    ;; Redefine M-< and M-> for some modes
    (use-package beginend
      :diminish beginend-global-mode
      :hook (after-init . beginend-global-mode)
      :config (mapc (lambda (pair)
                      (diminish (cdr pair)))
                    beginend-modes))
#+end_src
** Rime
#+begin_src emacs-lisp

  ;; (use-package rime
  ;;   :commands (toggle-input-method)
  ;;   :hook
  ;;   ((meow-insert-enter . (lambda() (when (derived-mode-p 'org-mode 'telega-chat-mode)
  ;;                                     (set-input-method "rime"))))
  ;;    (meow-insert-exit . (lambda() (set-input-method nil))))
  ;;   :bind
  ;;   (:map rime-mode-map
  ;;    ("C-j" . rime-inline-ascii)
  ;;    :map rime-mode-map
  ;;    ("C-l" . rime-force-enable))
  ;;   :custom
  ;;   (default-input-method 'rime)
  ;;   (rime-show-candidate 'posframe)
  ;;   (rime-posframe-style 'vertical)
  ;;   (rime-posframe-properties 
  ;;    (list :background-color "#333333"
  ;;          :foreground-color "#dcdccc"
  ;;          :internal-border-width 5))
  ;;   (rime-disable-predicates
  ;;    '(rime-predicate-prog-in-code-p

  ;;      rime-predicate-auto-english-p

  ;;      rime-predicate-punctuation-after-ascii-p
  ;;      rime-predicate-punctuation-line-begin-p
  ;;      my/rime-predicate-punctuation-next-char-is-paired-p
  ;;      rime-predicate-tex-math-or-command-p
  ;;      rime-predicate-org-latex-mode-p
  ;;      rime-predicate-current-uppercase-letter-p
  ;;      (lambda () (button-at (point)))
  ;;      meow-normal-mode-p
  ;;      meow-motion-mode-p
  ;;      meow-keypad-mode-p
  ;;      ;; +rime--punctuation-line-begin-p
  ;;      ;; +rime--english-prober
  ;;      ;; If the cursor is after a alphabet character.
  ;;      rime-predicate-after-alphabet-char-p
  ;;      ;; If input a punctuation after
  ;;      ;; a Chinese charactor with whitespace.
  ;;      rime-predicate-punctuation-after-space-cc-p
  ;;      rime-predicate-special-ascii-line-begin-p
  ;;      ))
  ;;   (rime-inline-predicates
  ;;    ;; If cursor is after a whitespace
  ;;    ;; which follow a non-ascii character.
  ;;    '(rime-predicate-space-after-cc-p
  ;;      ;; If the current charactor entered is a uppercase letter.
  ;;      rime-predicate-current-uppercase-letter-p))

  ;;   (rime-user-data-dir "~/.emacs.d/rime/")
  ;;   (rime-librime-root "~/.emacs.d/librime/dist")
  ;;   (rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")

  ;;   (rime-inline-ascii-trigger 'shift-l);; keycode for communicating with rime config,not for users.

  ;;   :init
  ;;   (defun my/rime-predicate-punctuation-next-char-is-paired-p ()
  ;;     (if (not (eq (point) (point-max)))
  ;;         (and (rime-predicate-current-input-punctuation-p)
  ;;              (not (string-match-p
  ;;                    (rx (any "\"\(\[\{"))
  ;;                    (buffer-substring (point) (1- (point)))
  ;;                    )
  ;;                   )
  ;;              (string-match-p
  ;;               (rx (any "\}\]\)\""))
  ;;               (buffer-substring (point) (1+ (point)))))
  ;;       nil))

  ;;   (defun rime-predicate-special-ascii-line-begin-p ()
  ;;     "If '/' or '#' at the beginning of the line."
  ;;     (and (> (point) (save-excursion (back-to-indentation) (point)))
  ;;          (let ((string (buffer-substring (point) (max (line-beginning-position) (- (point) 80)))))
  ;;            (string-match-p "^[\/#]" string))))

  ;;   )


  (use-package pangu-spacing
    :hook (after-init . (global-pangu-spacing-mode))
    :custom
    (pangu-spacing-real-insert-separtor t))

  (defun get-sentence-around-word ()
    "Capture the sentence around the current word."
    (interactive)
    (let* ((pos-start (point))
           (pos-end pos-start))
      ;; Move backward until we find the start of the sentence
      (skip-syntax-backward "-")
      ;; If at the beginning of a buffer, set the start position to the beginning of the buffer
      (when (eq (char-before) nil)
        (setq pos-start (point-min)))
      ;; Move forward until we find the end of the sentence
      (skip-syntax-forward "w")
      ;; Mark the beginning of the sentence area
      (set-mark-command nil)
      ;; Save the current buffer position and mark as the end position
      (setq pos-end (point))
      ;; Go back to the start of the sentence
      (goto-char pos-start)
      ;; Select the marked area
      (exchange-point-and-mark)
      ;; Return the text within the sentence area
      (buffer-substring-no-properties (region-beginning) (region-end))))

  (global-set-key (kbd "C-c C-s") 'get-sentence-around-word)
      #+end_src

** shortcut
#+begin_src emacs-lisp

    ;; 快速打开配置文件
    (defun open-init-file-and-eval()
      (interactive)
      (find-file "~/.emacs.d/init.el")
      (eval-buffer))

    (defun open-tools-file()
      (interactive)
      (find-file "~/.emacs.d/customizations/tools.org"))

    (defun open-task-org-file()
      (interactive)
      (find-file "~/Dropbox/org/Task.org"))

    (defun open-org-file()
      (interactive)
      (find-file "~/.emacs.d/customizations/init-org.el"))

    (global-set-key (kbd "<f1>") 'open-init-file-and-eval)
    (global-set-key (kbd "<f10>") 'open-task-org-file)
    (global-set-key (kbd "<f9>") 'open-tools-file)
      (global-set-key (kbd "<f5>") 'open-org-file)


    (use-package clipetty
      :ensure t
      :defer t
      :bind ("M-c" . clipetty-kill-ring-save))

    (defun keyboard-quit-dwim ()
      "Do-What-I-Mean behaviour for a general `keyboard-quit'."
      (interactive)
      (cond
       ((region-active-p)
        (keyboard-quit))
       ((derived-mode-p 'completion-list-mode)
        (delete-completion-window))
       ((> (minibuffer-depth) 0)
        (abort-recursive-edit))
       (t
        (keyboard-quit))))

    (define-key global-map (kbd "C-g") #'keyboard-quit-dwim)

#+end_src

#+RESULTS:
: keyboard-quit-dwim

** Hydra

https://github.com/abo-abo/hydra
#+begin_src emacs-lisp
;;design a transient key binding
(use-package hydra
  :defer t)
;;use the macro defhydra to define the hydra and its heads
(defhydra hydra-text-scale (global-map "<f12>")
  "scale text"
  ("j" move-line-up "up")
  ("k" move-line-down "down")
  ("f" nil "finished" :exit t))
;; hercules arrives with any other key binding
#+end_src
* Dired
#+begin_src emacs-lisp
;; Directory operations
(use-package dired
  :ensure nil
  :bind (:map dired-mode-map
         ("C-c C-p" . wdired-change-to-wdired-mode))
  :config
  ;; Guess a default target directory
  (setq dired-dwim-target t)

  ;; Always delete and copy recursively
  (setq dired-recursive-deletes 'always
        dired-recursive-copies 'always)

  ;; Show directory first
  (setq dired-listing-switches "-alh --group-directories-first")

  (when *IS-MAC*
    (if (executable-find "gls")
        (progn
          ;; Use GNU ls as `gls' from `coreutils' if available.
          (setq insert-directory-program "gls")
          ;; Using `insert-directory-program'
          (setq ls-lisp-use-insert-directory-program t))
      (progn
        ;; Suppress the warning: `ls does not support --dired'.
        (setq dired-use-ls-dired nil)
        (setq dired-listing-switches "-alh"))))

  ;; Quick sort dired buffers via hydra
  (use-package dired-quick-sort
    :bind (:map dired-mode-map
           ("S" . hydra-dired-quick-sort/body)))

  ;; Show git info in dired
  (use-package dired-git-info
    :bind (:map dired-mode-map
           (")" . dired-git-info-mode)))

  ;; Allow rsync from dired buffers
  (use-package dired-rsync
    :bind (:map dired-mode-map
           ("C-c C-r" . dired-rsync)))

  ;; Colorful dired
  (use-package diredfl
    :hook (dired-mode . diredfl-mode))

  ;; Shows icons
  (use-package nerd-icons-dired
    :diminish
    :custom-face
    (nerd-icons-dired-dir-face ((t (:inherit nerd-icons-dsilver :foreground unspecified))))
    :hook (dired-mode . nerd-icons-dired-mode)
    :config
    ;; WORKAROUND: display transparent background of icons
    ;; @see https://github.com/rainstormstudio/nerd-icons-dired/issues/1#issuecomment-2628680359
    (defun my-nerd-icons-dired--add-overlay (pos string)
      "Add overlay to display STRING at POS."
      (let ((ov (make-overlay (1- pos) pos)))
        (overlay-put ov 'nerd-icons-dired-overlay t)
        (overlay-put ov 'after-string
                     (propertize "_" 'display string))))
    (advice-add #'nerd-icons-dired--add-overlay :override #'my-nerd-icons-dired--add-overlay))

  ;; Extra Dired functionality
  (use-package dired-aux :ensure nil)
  (use-package dired-x
    :ensure nil
    :demand t
    :config
    (let ((cmd (cond (*IS-MAC* "open")
                     (*IS-LINUX* "xdg-open")
                     (t ""))))
      (setq dired-guess-shell-alist-user
            `(("\\.pdf\\'" ,cmd)
              ("\\.docx\\'" ,cmd)
              ("\\.\\(?:djvu\\|eps\\)\\'" ,cmd)
              ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" ,cmd)
              ("\\.\\(?:xcf\\)\\'" ,cmd)
              ("\\.csv\\'" ,cmd)
              ("\\.tex\\'" ,cmd)
              ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|rm\\|rmvb\\|ogv\\)\\(?:\\.part\\)?\\'" ,cmd)
              ("\\.\\(?:mp3\\|flac\\)\\'" ,cmd)
              ("\\.html?\\'" ,cmd)
              ("\\.md\\'" ,cmd))))

    (setq dired-omit-files
          (concat dired-omit-files
                  "\\|^.DS_Store$\\|^.projectile$\\|^.git*\\|^.svn$\\|^.vscode$\\|\\.js\\.meta$\\|\\.meta$\\|\\.elc$\\|^.emacs.*"))))

;; `find-dired' alternative using `fd'
(when (executable-find "fd")
  (use-package fd-dired))
#+end_src

#+RESULTS:
: #s(hash-table data (:use-package (26639 9048 148188 0) :init (26639 9048 148182 0) :init-secs (0 0 44 0) :use-package-secs (0 0 112 0)))

* Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init (setq ibuffer-filter-group-name-face '(:inherit (font-lock-string-face bold))))

   (use-package nerd-icons-ibuffer
     :ensure t
     :hook (ibuffer-mode . nerd-icons-ibuffer-mode)
     :config
     ;; Whether display the icons.
     (setq nerd-icons-ibuffer-icon t)
     (setq nerd-icons-ibuffer-color-icon t)
     (setq nerd-icons-ibuffer-icon-size 1.0)
     (setq  nerd-icons-ibuffer-human-readable-size t)
     ;; A list of ways to display buffer lines with `nerd-icons'.
     ;; See `ibuffer-formats' for details.
     ;; nerd-icons-ibuffer-formats

     ;; Slow Rendering
     ;; If you experience a slow down in performance when rendering multiple icons simultaneously,
     ;; you can try setting the following variable
     (setq inhibit-compacting-font-caches t))

  (use-package ibuffer-project
    :hook (ibuffer . (lambda ()
                       "Group ibuffer's list by project."
                       (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))
                       (unless (eq ibuffer-sorting-mode 'project-file-relative)
                         (ibuffer-do-sort-by-project-file-relative))))
    :init (setq ibuffer-project-use-cache t)
    :config
    (defun my-ibuffer-project-group-name (root type)
      "Return group name for project ROOT and TYPE."
      (if (and (stringp type) (> (length type) 0))
          (format "%s %s" type root)
        (format "%s" root)))
    (progn
      (advice-add #'ibuffer-project-group-name :override #'my-ibuffer-project-group-name)
      (setq ibuffer-project-root-functions
            `((ibuffer-project-project-root . ,(nerd-icons-octicon "nf-oct-repo" :height 1.2 :face ibuffer-filter-group-name-face))
              (file-remote-p . ,(nerd-icons-codicon "nf-cod-radio_tower" :height 1.2 :face ibuffer-filter-group-name-face)))))
    (progn
      (advice-remove #'ibuffer-project-group-name #'my-ibuffer-project-group-name)
      (setq ibuffer-project-root-functions
            '((ibuffer-project-project-root . "Project")
              (file-remote-p . "Remote"))))
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 18 18 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  project-relative-file))))


  ;; (use-package buffer-name-relative-mode
  ;;   :ensure t
  ;;   :vc (:url "https://codeberg.org/ideasman42/emacs-buffer-name-relative" :branch "main")
  ;;   :hook (after-init . buffer-name-relative-mode)
  ;;   :config
  ;;   (setq buffer-name-relative-prefix '("" . "/")))

  ;; (use-package ibuffer-sidebar
  ;;   :load-path "~/.emacs.d/fork/ibuffer-sidebar"
  ;;   :ensure nil
  ;;   :commands (ibuffer-sidebar-toggle-sidebar)
  ;;   :config
  ;;   (setq ibuffer-sidebar-use-custom-font t)
  ;;   (setq ibuffer-sidebar-face `(:family "Helvetica" :height 140)))

  ;; (defun +sidebar-toggle ()q
  ;;   "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
  ;;   (interactive)
  ;;   (dired-sidebar-toggle-sidebar)
  ;;   (ibuffer-sidebar-toggle-sidebar))

#+end_src
* Org-mode
** org-capture
#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :bind ("C-c x" . (lambda () (interactive) (org-capture)))
    :hook ((org-capture-mode . (lambda ()
                                 (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
           (org-capture-mode . delete-other-windows))
    :custom
    (org-default-notes-file "~/org/inbox.org")
    (org-capture-use-agenda-date nil)
    ;; define common template
    (defvar my-blog-title "")
    (defun input-blog-title ()
      (setq my-blog-title (read-from-minibuffer "Enter blog title: "))
      my-blog-title)

    (defun my/org-capture-new-file-with-date ()
      "Prompt for a new Org file name and return full path with date prefix."
      (let ((title (read-string "New post title: ")))
        (setq my-blog-title title)
        (expand-file-name
         (format "%s-%s.org"
                 (format-time-string "%Y-%m-%d")
                 (org-hugo-slug title))
         "~/codebase/blog-bus/dingtele.github.io/content-org/")))  ;; Adjust this directory as needed

    (org-capture-templates `(
                             ("t" "Task")
                             ("tt" "Task" entry (file+headline "Task.org" "TO-DO Queque")
                              "** TODO %?   %^g"
                              :prepend t
                              :jump-to-captured t)
                             ("tp" "Weekly-emacs-plugin" entry (file+headline "Task.org" "Weekly-Emacs-Plugin")
                              ;; "** TODO %?   %^g"
                              "%(fetch-weather-data)\n"
                              :prepend t
                              :jump-to-captured t)
                             ("tc" "Class-Schedule" entry (file+headline "Task.org" "Class-Schedule")
                              "* TODO %i%?"
                              :empty-lines-after
                              :jump-to-captured t
                              :prepend t)
                             ("n" "Notes" entry (file+headline "Reading-Summary.org" "Notes")
                              "* %? %^g\n%i\n"
                              :empty-lines-after 1)
                             
                             ("l" "today i learned..." entry (file+olp+datetree "Journal.org" "Today i Learned")
                              "* %U - :%?"
                              :empty-lines-after 1
                              :jump-to-captured t
                              :prepend f)

                             ("b" "Blog" plain (file ,(function my/org-capture-new-file-with-date))
                              ,(concat "* TODO %(progn my-blog-title)  :%^g:@%^{categories}:\n"
                                       ":PROPERTIES:\n"
                                       ":EXPORT_FILE_NAME: %(org-hugo-slug my-blog-title)\n"
                                       ":EXPORT_DATE: " (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)) "\n"
                                       ":END:\n"
                                       "%?\n"))
                             ("g" "Gallery")
                             ("gf" "字体收藏" entry
                              (file+olp "~/Dropbox/20250518105542-gallery.org" "字体收藏")
                              "** NAME: %?\n- 特点: \n- 样例: /样例文字/\n- 链接: %a")
                             
                             ("gc" "颜色收藏" entry
                              (file+olp "~/Dropbox/20250518105542-gallery.org" "色彩方案")
                              "** %?\n- 色号: \n- 用途: \n#+BEGIN_SRC emacs-lisp\n(setq my-color \"\")\n#+END_SRC")
                             
                             )
                           )
)


    (use-package org-agenda
      :ensure nil
      :after org
      :bind
      ("C-c a" . org-agenda)
      :custom
      (org-agenda-include-diary t)
      (org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
                                  ;; Indent todo items by level to show nesting
                                  (todo . " %i %-12:c%l")
                                  (tags . " %i %-12:c")
                                  (search . " %i %-12:c")))
      (org-agenda-start-on-weekday nil)
      (custom-set-variables '(org-agenda-files
                              '("~/Dropbox/org/Task.org")))
      )

    (require 'org-habit)

    ;; (use-package org-super-agenda
    ;;   :defer nil
    ;;   :custom
    ;;   (org-super-agenda-groups '((:auto-dir-name t)))
    ;;   :config
    ;;   (org-super-agenda-mode))

    (use-package org-sidebar :ensure t)

    (use-package org-journal
      :ensure t
      :defer t
      :bind (("C-x j" . org-journal-new-entry))
      :config
      (setq org-journal-dir  "~/Dropbox/org/")
      (setq org-journal-date-format   "%F, %A")
      (setq org-journal-time-format  "%T ")
      (setq org-journal-file-format  "%Y.org")  ; their file names
      (setq org-journal-file-type  'yearly)
      (setq org-journal-enable-agenda-integration  t)
      (setq org-journal-enable-cache  t)

      (defun org-journal-save-entry-and-exit()
        "Simple convenience function.
              Saves the buffer of the current day's entry and kills the window
              Similar to org-capture like behavior"
        (interactive)
        (save-buffer)
        (kill-buffer-and-window))
      (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit))

    (use-package org-alert
      :config
      )

    (use-package org-zettel-ref-mode
      :ensure nil
      :vc (:url "https://github.com/yibie/org-zettel-ref-mode" :rev :newest)
      ;; :load-path "~/.emacs.d/site-lisp/org-zettel-ref-mode/"
      :init
      (setq org-zettel-ref-overview-directory "~/Dropbox/Notes")
      :config
      ;; (setq org-zettel-ref-mode-type 'denote)
      (setq org-zettel-ref-mode-type 'org-roam)
      ;; (setq org-zettel-ref-mode-type 'normal)
      (setq org-zettel-ref-python-file "~/.emacs.d/elpa/org-zettel-ref-mode/convert-to-org.py")
      (setq org-zettel-ref-temp-folder "~/Dropbox/book-store/to-be-converted/")
      (setq org-zettel-ref-reference-folder "~/Dropbox/book-store/converted-org")
      (setq org-zettel-ref-archive-folder "~/Dropbox/book-store/archives/")
      (setq org-zettel-ref-python-environment 'venv)
      (setq org-zettel-ref-python-env-name "venv")
      (setq org-zettel-ref-debug t)
      (setq org-zettel-ref-highlight-types
            (append org-zettel-ref-highlight-types
                    '(("warning" . (:char "w"
                                    :face (:background "#FFA726"
                                           :foreground "#000000"
                                           :extend t)
                                    :name "warning"
                                    :prefix "⚠️"))
                      ("success" . (:char "s"
                                    :face (:background "#66BB6A"
                                           :foreground "#FFFFFF"
                                           :extend t)
                                    :name "success"
                                    :prefix "✅")))))
      (define-key org-zettel-ref-minor-mode-map (kbd "C-c q") 'org-zettel-ref-add-quick-note)
      (define-key org-zettel-ref-minor-mode-map (kbd "C-c p") 'org-zettel-ref-quick-markup)
      )

    (use-package calendar
      :ensure nil
      :hook (calendar-today-visible . calendar-mark-today)
      :custom
      ;; 是否显示中国节日，我们使用 `cal-chinese-x' 插件
      (calendar-chinese-all-holidays-flag nil)
      ;; 是否显示节日
      (calendar-mark-holidays-flag t)
      ;; 是否显示Emacs的日记，我们使用org的日记
      (calendar-mark-diary-entries-flag nil)
      ;; 数字方式显示时区，如 +0800，默认是字符方式如 CST
      (calendar-time-zone-style 'numeric)
      ;; 日期显示方式：year/month/day
      (calendar-date-style 'iso)
      ;; 中文天干地支设置
      (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
      (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
      ;; 设置中文月份
      (calendar-month-name-array ["一月" "二月" "三月" "四月" "五月" "六月" "七月" "八月" "九月" "十月" "十一月" "十二月"])
      ;; 设置星期标题显示
      (calendar-day-name-array ["日" "一" "二" "三" "四" "五" "六"])
      ;; 周一作为一周第一天
      (calendar-week-start-day 1)
      )

    ;; 时间解析增加中文拼音
    (use-package parse-time
      :ensure nil
      :defer t
      :config
      (setq parse-time-months
            (append '(("yiy" . 1) ("ery" . 2) ("sany" . 3)
                      ("siy" . 4) ("wuy" . 5) ("liuy" . 6)
                      ("qiy" . 7) ("bay" . 8) ("jiuy" . 9)
                      ("shiy" . 10) ("shiyiy" . 11) ("shiery" . 12)
                      ("yiyue" . 1) ("eryue" . 2) ("sanyue" . 3)
                      ("siyue" . 4) ("wuyue" . 5) ("liuyue" . 6)
                      ("qiyue" . 7) ("bayue" . 8) ("jiuyue" . 9)
                      ("shiyue" . 10) ("shiyiyue" . 11) ("shieryue" . 12))
                    parse-time-months))

      (setq parse-time-weekdays
            (append '(("zri" . 0) ("zqi" . 0)
                      ("zyi" . 1) ("zer" . 2) ("zsan" . 3)
                      ("zsi" . 4) ("zwu" . 5) ("zliu" . 6)
                      ("zr" . 0) ("zq" . 0)
                      ("zy" . 1) ("ze" . 2) ("zs" . 3)
                      ("zsi" . 4) ("zw" . 5) ("zl" . 6))
                    parse-time-weekdays)))

    ;; 中国节日设置
    (use-package cal-china-x
      :ensure t
      :commands cal-china-x-setup
      :hook (after-init . cal-china-x-setup)
      :config
      ;; 重要节日设置
      (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
      ;; 所有节日设置
      (setq cal-china-x-general-holidays
            '(;;公历节日
              (holiday-fixed 1 1 "元旦")
              (holiday-fixed 2 14 "情人节")
              (holiday-fixed 3 8 "妇女节")
              (holiday-fixed 3 14 "白色情人节")
              (holiday-fixed 4 1 "愚人节")
              (holiday-fixed 5 1 "劳动节")
              (holiday-fixed 5 4 "青年节")
              (holiday-float 5 0 2 "母亲节")
              (holiday-fixed 6 1 "儿童节")
              (holiday-float 6 0 3 "父亲节")
              (holiday-fixed 9 10 "教师节")
              (holiday-fixed 10 1 "国庆节")
              (holiday-fixed 10 2 "国庆节")
              (holiday-fixed 10 3 "国庆节")
              (holiday-fixed 10 24 "程序员节")
              (holiday-fixed 11 11 "双11购物节")
              (holiday-fixed 12 25 "圣诞节")
              ;; 农历节日
              (holiday-lunar 12 30 "春节" 0)
              (holiday-lunar 1 1 "春节" 0)
              (holiday-lunar 1 2 "春节" 0)
              (holiday-lunar 1 15 "元宵节" 0)
              (holiday-solar-term "清明" "清明节")
              (holiday-solar-term "小寒" "小寒")
              (holiday-solar-term "大寒" "大寒")
              (holiday-solar-term "立春" "立春")
              (holiday-solar-term "雨水" "雨水")
              (holiday-solar-term "惊蛰" "惊蛰")
              (holiday-solar-term "春分" "春分")
              (holiday-solar-term "谷雨" "谷雨")
              (holiday-solar-term "立夏" "立夏")
              (holiday-solar-term "小满" "小满")
              (holiday-solar-term "芒种" "芒种")
              (holiday-solar-term "夏至" "夏至")
              (holiday-solar-term "小暑" "小暑")
              (holiday-solar-term "大暑" "大暑")
              (holiday-solar-term "立秋" "立秋")
              (holiday-solar-term "处暑" "处暑")
              (holiday-solar-term "白露" "白露")
              (holiday-solar-term "秋分" "秋分")
              (holiday-solar-term "寒露" "寒露")
              (holiday-solar-term "霜降" "霜降")
              (holiday-solar-term "立冬" "立冬")
              (holiday-solar-term "小雪" "小雪")
              (holiday-solar-term "大雪" "大雪")
              (holiday-solar-term "冬至" "冬至")
              (holiday-lunar 5 5 "端午节" 0)
              (holiday-lunar 8 15 "中秋节" 0)
              (holiday-lunar 7 7 "七夕情人节" 0)
              (holiday-lunar 12 8 "腊八节" 0)
              (holiday-lunar 9 9 "重阳节" 0)))
      ;; 设置日历的节日，通用节日已经包含了所有节日
      (setq calendar-holidays (append cal-china-x-general-holidays)))

    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/Dropbox/org-roam-files/"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      ;; (require 'org-roam-protocol)
      )

#+end_src
** org-agenda
** org-supertag
#+begin_src emacs-lisp
(use-package org-supertag
:defer t
:after org-mode
:vc (:url "https://github.com/yibie/org-supertag" :rev :newest)
:hook
(after-init . org-supertag-config))
#+end_src
** org-node
** org-zeft
#+begin_src emacs-lisp
    (use-package zeft
    :vc (:url "https://github.com/casouri/zeft")
    :config
    (setq zeft-directory "~/Dropbox/Notes"))

  (use-package deft
    :config
(setq deft-directory "~/Dropbox/Notes")
(setq deft-extensions '("org")))
#+end_src
* UI
#+begin_src emacs-lisp
(menu-bar-mode 1)

;; Set up the visible bell
(setq visible-bell t)
;; Go straight to scratch buffer on startup
(setq inhibit-startup-message t)
;(toggle-frame-maximized)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)

;;modeline上显示我的所有的按键和执行的命令
(require 'keycast)
(keycast-header-line-mode t)

;(setq-default cursor-type '(bar . 5))
(column-number-mode)
(global-display-line-numbers-mode t)

;; Set frame transparency
;; Make frame transparency overridable
(defvar frame-transparency '(95 . 95))

;; (set-frame-parameter (selected-frame) 'alpha frame-transparency)
;; (add-to-list 'default-frame-alist `(alpha . ,frame-transparency))
;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))
(add-hook 'server-after-make-frame-hook
          (lambda ()
            (if (display-graphic-p)
                (menu-bar-mode 1)
              (menu-bar-mode -1))))


;; hide the frame title
;; (add-to-list 'default-frame-alist '(undecorated . t))

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
;; (set-fringe-mode 2)        ; Give some breathing room

(global-visual-line-mode t)
(require 'visual-fill-column)
(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
(setq-default visual-fill-column-center-text t)
(setq-default visual-fill-column-width 120)



(use-package nerd-icons
  :ensure t
  ;; :custom
  ;; The Nerd Font you want to use in GUI
  ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;; but you can use any other Nerd Font if you want
  ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  )


;; ;; These settings relate to how emacs interacts with your operating system
;; (setq ;; makes killing/yanking interact with the clipboard
;;       x-select-enable-clipboard t

;;       ;; I'm actually not sure what this does but it's recommended?
;;       x-select-enable-primary t

;;       ;; Save
;; (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)

(add-hook 'switch-buffer-functions
          (lambda (prev curr)
            (cl-assert (eq curr (current-buffer)))  ;; Always t
            (message "%S -> %S" prev curr))) ;;TODO

;; emacs windows configuration layout stack
(use-package winner
  :ensure nil
  :hook (after-init . winner-mode)
  :commands (winner-undo winner-redo)
  :config
  (setq winner-boring-buffers
        '("*Completions*"
          "*Compile-Log*"
          "*inferior-lisp*"
          "*Fuzzy Completions*"
          "*Apropos*"
          "*Help*"
          "*cvs*"
          "*Buffer List*"
          "*Ibuffer*"
          "*esh command on file*"))
  )
#+end_src
** Themes
#+begin_src emacs-lisp
  ;; Color Themes
  ;; Read http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/
  ;; for a great explanation of emacs color themes.
  ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html
  ;; for a more technical explanation.

  ;; Don't prompt to confirm theme safety.
  (setq custom-safe-themes t)

  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
  (add-to-list 'load-path "~/.emacs.d/themes")
  (require 'ef-themes)
  ;; (require 'nano-theme)

  ;; (custom-set-variables '(ef-autumn))

  ;; Ensure that themes will be applied even if they have not been customized
  (defun reapply-themes ()
    "Forcibly load the themes listed in `custom-enabled-themes'."
    (dolist (theme custom-enabled-themes)
      (unless (custom-theme-p theme)
        (load-theme theme)))
    (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))

  (add-hook 'after-init-hook 'reapply-themes)

;; my favorite themes for frequent switching:
;; light: doom-feather-light /
;; dark: doom-one /doom-palenight

  ;; Toggle between light and dark

  (defun light ()
    "Activate a light color theme."
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (setq custom-enabled-themes '(doom-opera-light))
    (reapply-themes))

  (defun dark ()
    "Activate a dark color theme."
    (interactive)
    (disable-theme (car custom-enabled-themes))
    (setq custom-enabled-themes '(doom-one ef-winter doom-palenight))
    (reapply-themes))
#+end_src
** Clore
#+begin_src emacs-lisp

;;; 正色
(defconst n-青       "􀝦#00ffff")
(defconst n-赤       "􀝦#c3272b")
(defconst n-白       "􀝦#ffffff")  ;; 精白
(defconst n-黑       "􀝦#000000")
(defconst n-黄       "􀝦#fff143")  ;; 不知其法而用鵝黃


;;; 間色
(defconst n-紺青     "􀝦#3f4470")
(defconst n-鴉青     "􀝦#424c50")
(defconst n-靛藍     "􀝦#065279")
(defconst n-羣青     "􀝦#2e59a7")
(defconst n-深竹月   "􀝦#2e62cd")
(defconst n-寶藍     "􀝦#4b5cc4")
(defconst n-青冥     "􀝦#3271ae")
(defconst n-靛青     "􀝦#177CB0")
(defconst n-湖藍     "􀝦#30DFF3")
(defconst n--青      "􀝦#00ffff")

(defconst n-松绿     "􀝦#057748")
(defconst n-官緑     "􀝦#2a6e3f")
(defconst n-青青     "􀝦#4f6f46")
(defconst n-蒼翠     "􀝦#519a73")
(defconst n-菉竹     "􀝦#698e6a")
(defconst n-竹靑     "􀝦#789262")
(defconst n-春辰     "􀝦#a9be7b")
(defconst n-松花     "􀝦#bce672")
(defconst n-歐碧     "􀝦#c0d695")
(defconst n-龍泉靑瓷 "􀝦#c8e6c6")
(defconst n-水緑     "􀝦#d4f2e7")
(defconst n-水黄     "􀝦#ddeec4")
(defconst n-春緑     "􀝦#e3efd1")
(defconst n-蔥青     "􀝦#edfebb")
(defconst n-断肠     "􀝦#ecebc2")

(defconst n-絳       "􀝦#510312")
(defconst n-胭脂     "􀝦#960018")
(defconst n-綪       "􀝦#b13546")
(defconst n-品红     "􀝦#F00056")
(defconst n-朱       "􀝦#ff0000")
(defconst n-火红     "􀝦#FF2D51")
(defconst n-丹       "􀝦#ff4c00")
(defconst n-妃       "􀝦#ed5736")
(defconst n-海棠     "􀝦#DB5A6B")
(defconst n-桃红     "􀝦#f47983")
(defconst n-鳳仙粉   "􀝦#FF9393")
(defconst n-粉红     "􀝦#ffb3a7")
(defconst n-露玫瑰   "􀝦#ffe4e1")


(defconst n-墨       "􀝦#50616D")
(defconst n-蒼青     "􀝦#7397ab")
(defconst n-墨灰     "􀝦#758A99")

(defconst n-养生主   "􀝦#b49b7f")

(defconst n-茶       "􀝦#B35C44")
(defconst n-鱼肚     "􀝦#FCEFE8")
(defconst n-珈琲椶   "􀝦#705438")
(defconst n-紙棕     "􀝦#D2B38C")
(defconst n-向日黃   "􀝦#FFC34D")
(defconst n-缟       "􀝦#F2ECDE")
(defconst n-牙       "􀝦#EEDEB0")
(defconst n-米灰     "􀝦#D3CBAF")
(defconst n-芽灰     "􀝦#E3DBBF")
(defconst n-胡粉     "􀝦#FFFAE8")
(defconst n-蠟白     "􀝦#FEF8DE")
(defconst n-富春紡   "􀝦#FEF4B4")
(defconst n-鹅黄     "􀝦#FFF143")
(defconst n-嬭油     "􀝦#fffdd0")
(defconst n-鸭黄     "􀝦#FAFF72")
(defconst n-蛤粉     "􀝦#fdfff4")
(defconst n-荼       "􀝦#F3F9F1")
(defconst n-素       "􀝦#E0F0E9")
(defconst n-霜       "􀝦#E9F1F6")
(defconst n-漆       "􀝦#161823")
(defconst n-黛       "􀝦#4A4266")
(defconst n-丁香     "􀝦#CCA4E3")
(defconst n-青莲     "􀝦#801DAE")
(defconst n-淡紫丁香 "􀝦#e6cfe6")
(defconst n-水紅     "􀝦#f3d3e7")
(defconst n-長萅蕐   "􀝦#FF47D1")
(defconst n-紫扇貝   "􀝦#923A60")
#+end_src
** Fonts
#+begin_src emacs-lisp
  (defun ding-font-existsp (font)
    (if (null (x-list-fonts font))
        nil
      t))
  ;; LXGW WenKai Mono 配合 Iosevka 按照 1:1 缩放，偶数字号就可以做到等高等宽。
  (defvar zh-font-list '("TsangerJinKai03 W04" "LXGW Bright GB" "LXGW Bright Medium" "HanaMinB"))
  (defvar en-font-list '("JetBrains Maple Mono" "Iosevka Fixed SS14" "JetBrains Mono" "Fira Code" "IBM Plex Mono"))
  (defvar font-size
    (cond (*IS-LINUX* 12)
          (*IS-MAC* 14)))

  (defun ding-make-font-string (font-name font-size)
    (if (and (stringp font-size)
             (equal ":" (string (elt font-size 0))))
        (format "%s%s" font-name font-size)
      (format "%s %s" font-name font-size)))

  (defun ding-set-font (english-fonts
                        english-font-size
                        chinese-fonts
                        &optional chinese-font-scale)

    (setq chinese-font-scale (or chinese-font-scale 1))

    (setq face-font-rescale-alist
          (cl-loop for x in zh-font-list
                   collect (cons x chinese-font-scale)))

    "english-font-size could be set to \":pixelsize=18\" or a integer.
    If set/leave chinese-font-scale to nil, it will follow english-font-size"

    (let ((en-font (ding-make-font-string
                    (cl-find-if #'ding-font-existsp english-fonts)
                    english-font-size))
          (zh-font (font-spec :family (cl-find-if #'ding-font-existsp chinese-fonts))))

      ;; Set the default English font
      (message "Set English Font to %s" en-font)
      (set-face-attribute 'default nil :font en-font)

      ;; Set Chinese font
      ;; Do not use 'unicode charset, it will cause the English font setting invalid
      (message "Set Chinese Font to %s" zh-font)
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset zh-font))))
    ;;;;;;  set fonts HERE!!! ;;;;;;
  (ding-set-font en-font-list font-size zh-font-list)
  (add-to-list 'face-font-rescale-alist '("Apple Color Emoji" . 0.8))

    ;;;;;; set for reading mode ;;;;;;
  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch
                             :family "TsangerJinKai03 W04"
                             :height 1.1))
#+end_src
** Frame
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t
    :hook (after-init . dimmer-mode)
    :config
    (dimmer-configure-which-key)
    (dimmer-configure-helm)
    (setq-default dimmer-fraction 0.35)
    (with-eval-after-load 'dimmer
      ;; TODO: file upstream as a PR
      (advice-add 'frame-set-background-mode :after (lambda (&rest args) (dimmer-process-all))))
    (with-eval-after-load 'dimmer
      ;; Don't dim in terminal windows. Even with 256 colours it can
      ;; lead to poor contrast.  Better would be to vary dimmer-fraction
      ;; according to frame type.
      (defun sanityinc/display-non-graphic-p ()
        (not (display-graphic-p)))
      (add-to-list 'dimmer-exclusion-predicates 'sanityinc/display-non-graphic-p))
    )


  ;;set the width (in characters wide) and height
  ;; (in lines high) Emacs will have whenever you start it
  (setq initial-frame-alist '((top . 50) (left . 100) (width . 177) (height . 53)))

  ;; https://t.me/emacs_china/263544
  (use-package pulse
    :custom-face
    (pulse-highlight-start-face ((t (:inherit region :background unspecified))))
    (pulse-highlight-face ((t (:inherit region :background unspecified :extend t))))
    :hook (((dumb-jump-after-jump imenu-after-jump) . +recenter-and-pulse)
           ((bookmark-after-jump magit-diff-visit-file next-error) . +recenter-and-pulse-line)
  (focus-in . pulse-momentary-highlight-one-line))
    :init
    (setq pulse-delay 0.1
          pulse-iterations 2)

    (defun +pulse-momentary-line (&rest _)
      "Pulse the current line."
      (pulse-momentary-highlight-one-line (point)))

    (defun +pulse-momentary (&rest _)
      "Pulse the region or the current line."
      (if (fboundp 'xref-pulse-momentarily)
          (xref-pulse-momentarily)
        (+pulse-momentary-line)))

    (defun +recenter-and-pulse(&rest _)
      "Recenter and pulse the region or the current line."
      (recenter)
      (+pulse-momentary))

    (defun +recenter-and-pulse-line (&rest _)
      "Recenter and pulse the current line."
      (recenter)
      (+pulse-momentary-line))

    (dolist (cmd '(recenter-top-bottom
                   other-window switch-to-buffer
                   aw-select toggle-window-split
                   windmove-do-window-select
                   pager-page-down pager-page-up
                   treemacs-select-window
                   tab-bar-select-tab))
      (advice-add cmd :after #'+pulse-momentary-line))

    (dolist (cmd '(pop-to-mark-command
                   pop-global-mark
                   goto-last-change))
      (advice-add cmd :after #'+recenter-and-pulse))

    (dolist (cmd '(symbol-overlay-basic-jump
                   compile-goto-error))
      (advice-add cmd :after #'+recenter-and-pulse-line))
    )

  (use-package goggles
    :ensure t
    :hook ((prog-mode text-mode) . goggles-mode)
    :config
    (setq-default goggles-pulse nil)
    )

#+end_src

#+RESULTS:
| nano-modeline-text-mode | goggles-mode | text-mode-hook-identify |

** Modeline
#+begin_src emacs-lisp
  ;; (require 'nano-modeline)
  ;; (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode)
  ;; (add-hook 'text-mode-hook            #'nano-modeline-text-mode)
  ;; (add-hook 'org-mode-hook             #'nano-modeline-org-mode)
  ;; (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode)
  ;; (add-hook 'mu4e-headers-mode-hook    #'nano-modeline-mu4e-headers-mode)
  ;; (add-hook 'mu4e-view-mode-hook       #'nano-modeline-mu4e-message-mode)
  ;; (add-hook 'elfeed-show-mode-hook     #'nano-modeline-elfeed-entry-mode)
  ;; (add-hook 'elfeed-search-mode-hook   #'nano-modeline-elfeed-search-mode)
  ;; (add-hook 'term-mode-hook            #'nano-modeline-term-mode)
  ;; (add-hook 'xwidget-webkit-mode-hook  #'nano-modeline-xwidget-mode)
  ;; (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode)
  ;; (add-hook 'org-capture-mode-hook     #'nano-modeline-org-capture-mode)
  ;; (add-hook 'org-agenda-mode-hook      #'nano-modeline-org-agenda-mode)

  ;; (custom-set-variables '(mode-line-format nil))
  ;; (nano-minibuffer-mode 1)
  ;; (nano-modeline-text-mode t)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** SVG-tag
#+begin_src emacs-lisp
  ;; (require 'svg-tag-mode)
  ;; (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  ;; (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  ;; (defconst day-re "[A-Za-z]\\{3\\}")
  ;; (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  ;; ;; (defun svg-progress-percent (value)
  ;; ;;   (save-match-data
  ;; ;;     (svg-image (svg-lib-concat
  ;; ;;                 (svg-lib-progress-bar  (/ (string-to-number value) 100.0)
  ;; ;;                                        nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
  ;; ;;                 (svg-lib-tag (concat value "%")
  ;; ;;                              nil :stroke 0 :margin 0)) :ascent 'center)))

  ;; ;; (defun svg-progress-count (value)
  ;; ;;   (save-match-data
  ;; ;;     (let* ((seq (split-string value "/"))
  ;; ;;            (count (if (stringp (car seq))
  ;; ;;                       (float (string-to-number (car seq)))
  ;; ;;                     0))
  ;; ;;            (total (if (stringp (cadr seq))
  ;; ;;                       (float (string-to-number (cadr seq)))
  ;; ;;                     1000)))
  ;; ;;       (svg-image (svg-lib-concat
  ;; ;;                   (svg-lib-progress-bar (/ count total) nil
  ;; ;;                                         :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
  ;; ;;                   (svg-lib-tag value nil
  ;; ;;                                :stroke 0 :margin 0)) :ascent 'center))))

  ;; (setq svg-tag-tags
  ;;       `(
  ;;         ;; Org tags
  ;;         (":\\([A-Za-z0-9]+\\)" . ((lambda (tag) (svg-tag-make tag))))
  ;;         (":\\([A-Za-z0-9]+[ \-]\\)" . ((lambda (tag) tag)))

  ;;         ;; Task priority
  ;;         ("\\[#[A-Z]\\]" . ( (lambda (tag)
  ;;                               (svg-tag-make tag :face 'org-priority
  ;;                                             :beg 2 :end -1 :margin 0))))

  ;;         ;; TODO / DONE
  ;;         ("TODO" . ((lambda (tag) (svg-tag-make "TODO" :face 'org-todo :inverse t :margin 0))))
  ;;         ("DONE" . ((lambda (tag) (svg-tag-make "DONE" :face 'org-done :margin 0))))


  ;;         ;; Citation of the form [cite:@Knuth:1984]
  ;;         ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
  ;;                                           (svg-tag-make tag
  ;;                                                         :inverse t
  ;;                                                         :beg 7 :end -1
  ;;                                                         :crop-right t))))
  ;;         ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
  ;;                                                    (svg-tag-make tag
  ;;                                                                  :end -1
  ;;                                                                  :crop-left t))))


  ;;         ;; Active date (with or without day name, with or without time)
  ;;         (,(format "\\(<%s>\\)" date-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :beg 1 :end -1 :margin 0))))
  ;;         (,(format "\\(<%s \\)%s>" date-re day-time-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
  ;;         (,(format "<%s \\(%s>\\)" date-re day-time-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

  ;;         ;; Inactive date  (with or without day name, with or without time)
  ;;         (,(format "\\(\\[%s\\]\\)" date-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
  ;;         (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
  ;;         (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
  ;;          ((lambda (tag)
  ;;             (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date))))

  ;;         ;; ;; Progress
  ;;         ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
  ;;                                             (svg-progress-percent (substring tag 1 -2)))))
  ;;         ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
  ;;                                           (svg-progress-count (substring tag 1 -1)))))
  ;;         ))
  ;; (global-svg-tag-mode 1)
#+end_src
** Tab-Bar Mode
#+begin_src emacs-lisp
  ;;      (defun my/update-tab-bar-after-theme-change (&rest _args)
  ;;        "Update tab bar face attributes after a theme change."
  ;;        (set-face-attribute 'tab-bar-tab nil
  ;;                            :inherit 'doom-modeline-panel
  ;;                            :foreground 'unspecified
  ;;                            :background 'unspecified)
  ;;        (set-face-attribute 'tab-bar nil
  ;;                            :foreground (face-attribute 'default :foreground)))

  ;;      (advice-add 'load-theme :after #'my/update-tab-bar-after-theme-change)
  ;;      (my/update-tab-bar-after-theme-change)


  ;;     (require 'svg-lib)
  ;;      (require 'svg-tag-mode)
  ;;      (require 'lib-svg-tag-mode)
  ;;      (require 'lib-tab-bar)


  (use-package tabspaces
    :hook (after-init . tabspaces-mode)
    :defer nil
    :init
    (defun +tab-bar-tab-name-function ()
      "Generate a name for the current tab based on the buffer name.
          If the buffer name exceeds `tab-bar-tab-name-truncated-max` characters,
          truncate it and append `tab-bar-tab-name-ellipsis`.  If there are multiple
          windows in the tab, append the count of windows in parentheses.
          Return the formatted tab name."
      (let* ((raw-tab-name (buffer-name (window-buffer (minibuffer-selected-window))))
             (count (length (window-list-1 nil 'nomini)))
             (truncated-tab-name (if (< (length raw-tab-name)
                                        tab-bar-tab-name-truncated-max)
                                     raw-tab-name
                                   (truncate-string-to-width raw-tab-name
                                                             tab-bar-tab-name-truncated-max
                                                             nil nil tab-bar-tab-name-ellipsis))))
        (if (> count 1)
            (concat truncated-tab-name "(" (number-to-string count) ")")
          truncated-tab-name)))

    (defun +tab-bar-tab-name-format-function (tab i)
      "Format the display name for a tab in the tab bar.
          TAB is the tab descriptor, and I is the tab index.  Apply custom
          styling to the tab name and index using `tab-bar-tab-face-function`.

          - Prefix the tab with its index and a colon, styled with a bold weight.
          - Surround the tab name with spaces, adjusting vertical alignment
            for aesthetics.
          - Return the formatted tab name with applied text properties."
      (let ((face (funcall tab-bar-tab-face-function tab)))
        (concat
         ;; change tab-bar's height
         (propertize " " 'display '(raise 0.25))
         (propertize (format "%d:" i) 'face `(:inherit ,face :weight ultra-bold))
         (concat " " (propertize (alist-get 'name tab) 'face `(:inherit ,face :underline t)) " ")
         (propertize " " 'display '(raise -0.25))
         )))
    ;; :config
    ;; (require 'lib-svg-tag-mode)
    ;; (add-hook 'tab-bar-new-tab 'lib-svg-tag-mode)
    :bind (("s-t" . tab-bar-new-tab)
           ("s-w" . tab-bar-close-tab))
    :custom
    (tab-bar-close-button-show nil)
    (tab-bar-new-button-show nil)
    (tab-bar-show t)
    (tab-bar-separator "​​")
    (tab-bar-tab-hints t)
    (tab-bar-new-tab-choice "*scratch*")
    (tab-bar-select-tab-modifiers '(meta))
    (tab-bar-tab-name-truncated-max 15)
    (tab-bar-border nil)
    (tab-bar-auto-width nil)
    (tab-bar-format '(tab-bar-format-tabs
                      tab-bar-format-add-tab
                      tab-bar-format-align-right
                      +tab-bar-telega-icon))
    ;; tab-bar-tab-name-function #'tab-bar-tab-name-truncated
    ;; tab-bar-tab-name-format-function #'eli/tab-bar-tab-name-with-svg
    (tab-bar-tab-name-function #'+tab-bar-tab-name-function)
    (tab-bar-tab-name-format-function #'+tab-bar-tab-name-format-function)
    (tab-bar-auto-width-max '((200)  20))
    ;; Sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    )
#+end_src

#+RESULTS:
: tab-bar-close-tab

- style for telega ， from https://github.com/LuciusChen/.emacs.d/blob/646e42fce207117de0e73d7cf16a04e4c21a11e4/lib/lib-tabbar.el
#+begin_src emacs-lisp

  ;; telega notification
  (defvar +tab-bar-telega-indicator-cache nil)

  (defun +tab-bar-telega-icon-update (&rest rest)
    "Update the Telega icon in the tab bar, reflecting notification counts.
  This function takes REST as an optional argument, though it is not used
  within the function body.

  The function checks if the Telega server is live and if the server buffer
  is active.  It computes various counts, including:

  - The number of unread messages (`unread-count`).
  - The number of mentions (`mentioned-count`).
  - The number of unread reactions (`reaction-count`).
  - The number of keyword matches (`keyword-count`).

  The total `notification-count` is the sum of these counts.  If this total
  is greater than zero, a formatted string with icons and counts is returned.
  This string includes:

  - A Telegram icon.
  - A bullet with the unread count.
  - An at-sign with the mention count.
  - A heart with the reaction count.
  - A hash with the keyword count.

  The function uses `nerd-icons-faicon` for the Telegram icon and applies
  specific faces to the counts for visual differentiation."
    (setq +tab-bar-telega-indicator-cache
          (when (and (fboundp 'telega-server-live-p)
                     (telega-server-live-p)
                     (buffer-live-p telega-server--buffer))
            (let* ((me-user (telega-user-me 'locally))
                   (online-p (and me-user (telega-user-online-p me-user)))
                   (keyword-count (length (ring-elements telega--notification-messages-ring)))
                   (unread-count (or (plist-get telega--unread-chat-count :unread_unmuted_count) 0))
                   (mentioned-count (apply '+ (mapcar (telega--tl-prop :unread_mention_count)
                                                      (telega-filter-chats telega--ordered-chats '(mention)))))
                   ;; 最好使用 (and is-known unread-reactions) temex 来切断一般列表中不可见的聊天
                   ;; 此类聊天，例如对频道中的帖子发表评论，或者您进入、写下一些内容然后离开，然后有人做出反应的聊天
                   (reaction-count (apply '+ (mapcar (telega--tl-prop :unread_reaction_count)
                                                     (telega-filter-chats telega--ordered-chats '(and is-known unread-reactions)))))
                   (notification-count (+ mentioned-count unread-count reaction-count keyword-count)))
              (when (> notification-count 0)
                (concat "[" (nerd-icons-faicon "nf-fae-telegram" :face '(:inherit nerd-icons-purple))
                        (when (> unread-count 0)
                          (propertize (concat " ●​​​" (number-to-string unread-count))
                                      'face 'telega-unmuted-count))
                        (when (> mentioned-count 0)
                          (propertize (concat " @​​​" (number-to-string mentioned-count))
                                      'face 'telega-mention-count))
                        (when (> reaction-count 0)
                          (propertize (concat " ♥​​​" (number-to-string reaction-count))
                                      'face 'telega-mention-count))
                        (when (> keyword-count 0)
                          (propertize (concat " #​​​" (number-to-string keyword-count))
                                      'face 'telega-unmuted-count))
                        "] "))))))

  (defun +tab-bar-telega-icon ()
    "Return the Telega icon for the tab bar, updating if necessary.
  This function checks if `+tab-bar-telega-indicator-cache` is set.  If it is,
  the cached value is returned.  Otherwise, it calls `+tab-bar-telega-icon-update`
  to refresh the icon and returns the updated value."
    (or +tab-bar-telega-indicator-cache
        (+tab-bar-telega-icon-update)))
#+end_src
#+RESULTS:
: t

** MiniBuffer
    #+begin_src emacs-lisp
    ;; (use-package nano-minibuffer
    ;; :defer nil
    ;; :vc (:url https://github.com/rougier/nano-minibuffer))
#+end_src

** posframe
#+begin_src emacs-lisp
;; Child frame
  (use-package posframe
    :hook (after-load-theme . posframe-delete-all)
    :init
    (defface posframe-border
      `((t (:inherit region)))
      "Face used by the `posframe' border."
      :group 'posframe)
    (defvar posframe-border-width 2
      "Default posframe border width.")
    :config
    (with-no-warnings
      (defun my-posframe--prettify-frame (&rest _)
        (set-face-background 'fringe nil posframe--frame))
      (advice-add #'posframe--create-posframe :after #'my-posframe--prettify-frame)

      (defun posframe-poshandler-frame-center-near-bottom (info)
        (cons (/ (- (plist-get info :parent-frame-width)
                    (plist-get info :posframe-width))
                 2)
              (/ (+ (plist-get info :parent-frame-height)
                    (* 2 (plist-get info :font-height)))
                 2)))))

(use-package transient-posframe
    :diminish
    :defines posframe-border-width
    :custom-face
    (transient-posframe ((t (:inherit tooltip))))
    (transient-posframe-border ((t (:inherit posframe-border :background unspecified))))
    :hook (after-init . transient-posframe-mode)
    :init
    (setq transient-posframe-border-width posframe-border-width
          transient-posframe-min-width 80
          transient-posframe-min-height nil
          transient-posframe-poshandler 'posframe-poshandler-frame-center
          transient-posframe-parameters '((left-fringe . 8)
                                          (right-fringe . 8)))
    :config
    (with-no-warnings
      ;; FIXME:https://github.com/yanghaoxie/transient-posframe/issues/5#issuecomment-1974871665
      (defun my-transient-posframe--show-buffer (buffer _alist)
        "Show BUFFER in posframe and we do not use _ALIST at this period."
        (when (posframe-workable-p)
          (let* ((posframe
                  (posframe-show buffer
                                 :font transient-posframe-font
                                 :position (point)
                                 :poshandler transient-posframe-poshandler
                                 :background-color (face-attribute 'transient-posframe :background nil t)
                                 :foreground-color (face-attribute 'transient-posframe :foreground nil t)
                                 :initialize #'transient-posframe--initialize
                                 :min-width transient-posframe-min-width
                                 :min-height transient-posframe-min-height
                                 :internal-border-width transient-posframe-border-width
                                 :internal-border-color (face-attribute 'transient-posframe-border :background nil t)
                                 :override-parameters transient-posframe-parameters)))
            (frame-selected-window posframe))))
      (advice-add #'transient-posframe--show-buffer :override #'my-transient-posframe--show-buffer)

      (setq transient-mode-line-format nil) ; without line

      (defun transient-posframe--initialize ()
        "Initialize transient posframe."
        (setq window-resize-pixelwise t)
        (setq window-size-fixed nil))

      (defun transient-posframe--resize (window)
        "Resize transient posframe."
        (fit-frame-to-buffer-1 (window-frame window)
                               nil transient-posframe-min-height
                               nil transient-posframe-min-width))
      (advice-add 'transient--fit-window-to-buffer :override #'transient-posframe--resize)

      (defun my-transient-posframe--hide ()
        "Hide transient posframe."
        (posframe-hide transient--buffer-name))
      (advice-add #'transient-posframe--delete :override #'my-transient-posframe--hide)))

#+end_src


** Highlighting
#+begin_src emacs-lisp
      (use-package hl-todo
        :ensure t
        :defer t
        :config
        (setq hl-todo-keyword-faces
              '(("TODO"   . "#FF0000")
                ("PERF" . "#4EEE85")
                ("FIXME"  . "#FF0000")
                ("DEBUG-ON-QUIT"  . "#A020F0")
                ("GOTCHA" . "#FF4500")
                ("NTC"   . "#1E90FF"))) ;;short for NOTICE
        (global-hl-todo-mode))


      (use-package paren
        :custom-face (show-paren-match ((t (:foreground "SpringGreen3" :underline t :weight bold))))
        :config
        (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-context-when-offscreen 'overlay ;; FIXME not working yet
              blink-matching-paren-highlight-offscreen t
              show-paren-delay 0.2)
        )

      ;; [rainbow-delimiters] Highlight brackets according to their depth
      (use-package rainbow-delimiters
        :ensure t
        :defer t
        :hook ((prog-mode conf-mode yaml-mode) . rainbow-delimiters-mode)
        :config
        (setq rainbow-delimiters-max-face-count 5))

      (use-package highlight-parentheses
        :ensure t
        :defer t
        :hook ((minibuffer-setup . highlight-parentheses-minibuffer-setup)
               (prog-mode . highlight-parentheses-mode))
        :config
        (setq highlight-parentheses-colors '("firebrick1" "firebrick3" "orange1" "orange3")
              highlight-parentheses-attributes '((:underline t) (:underline t) (:underline t))
              highlight-parentheses-delay 0.2)
        )

      (use-package hl-line
        :hook (after-init . global-hl-line-mode)
        :config
        ;; (setq hl-line-sticky-flag nil)
        ;; ;; Highlight starts from EOL, to avoid conflicts with other overlays
        ;; (setq hl-line-range-function (lambda () (cons (line-end-position)
        ;;                                          (line-beginning-position 2))))
      )

    (use-package region-occurrences-highlighter
      :ensure t
      :defer t
      :config
      (add-hook 'prog-mode-hook #'region-occurrences-highlighter-mode)
      (add-hook 'org-mode-hook #'region-occurrences-highlighter-mode)
      (add-hook 'text-mode-hook #'region-occurrences-highlighter-mode)
      (define-key region-occurrences-highlighter-nav-mode-map "\M-n" 'region-occurrences-highlighter-next)
      (define-key region-occurrences-highlighter-nav-mode-map "\M-p" 'region-occurrences-highlighter-prev))


  (use-package colorful-mode
    :ensure t ; Optional
    :defer t
    :hook (prog-mode text-mode)
    ;; :config (global-colorful-mode) ; Enable it globally
    ...)

#+end_src
** Mini Component
#+begin_src emacs-lisp

(defun exec/lsp-mode-string()
  (concat
   (propertize " eglot "
               'face '(:foreground "white" :background "brown"))
   (propertize
    (format (if (derived-mode-p 'eglot-mode)
                " on  "" off "))
    'face '(:foreground "white" :background "gray40"))))

(add-to-list 'header-line-format '(:eval (exec/lsp-mode-string)) t)

(setq-default header-line-format  '("" keycast-header-line (:eval (exec/lsp-mode-string))))

#+end_src
* Completion
#+begin_src emacs-lisp
      (use-package orderless
        :custom
        (completion-styles '(orderless basic))
        (completion-category-overrides '((file (styles basic partial-completion))))
        (orderless-component-separator #'orderless-escapable-split-on-space))

      ;; Support Pinyin
      (use-package pinyinlib
        :after orderless
        :autoload pinyinlib-build-regexp-string
        :init
        (defun completion--regex-pinyin (str)
          (orderless-regexp (pinyinlib-build-regexp-string str)))
        (add-to-list 'orderless-matching-styles 'completion--regex-pinyin))

      (use-package vertico
        :custom (vertico-count 15)
        :bind (:map vertico-map
        ;;        ("RET" . vertico-directory-enter)
               ("DEL" . vertico-directory-delete-char)
        ;;        ("M-DEL" . vertico-directory-delete-word)
               )
        :hook ((after-init . vertico-mode)
               (rfn-eshadow-update-overlay . vertico-directory-tidy)
               )
    )


      (use-package vertico-posframe
        :hook (vertico-mode . vertico-posframe-mode)
        :after posframe
        :init (setq
    	 vertico-posframe-poshandler #'posframe-poshandler-frame-center-near-bottom
               vertico-posframe-parameters
               '((left-fringe  . 8)
                 (right-fringe . 8))))

      (use-package nerd-icons-completion
        :hook (vertico-mode . nerd-icons-completion-mode))

      ;; (use-package marginalia
      ;;   :hook (after-init . marginalia-mode))

      (use-package consult
        :bind (;; C-c bindings in `mode-specific-map'
               ("C-c M-x" . consult-mode-command)
               ("C-c h"   . consult-history)
               ("C-c k"   . consult-kmacro)
               ("C-c m"   . consult-man)
               ("C-c i"   . consult-info)
               ("C-c r"   . consult-ripgrep)
               ("C-c T"   . consult-theme)
               ("C-."     . consult-imenu)

               ("C-c c e" . consult-colors-emacs)
               ("C-c c w" . consult-colors-web)
               ("C-c c f" . describe-face)
               ("C-c c l" . find-library)
               ("C-c c t" . consult-theme)

               ([remap Info-search]        . consult-info)
               ;; ([remap isearch-forward]    . consult-line)
               ([remap recentf-open-files] . consult-recent-file)

               ;; C-x bindings in `ctl-x-map'
               ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
               ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
               ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
               ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
               ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
               ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
               ;; Custom M-# bindings for fast register access
               ("M-#"     . consult-register-load)
               ("M-'"     . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
               ("C-M-#"   . consult-register)
               ;; Other custom bindings
               ("M-y"     . consult-yank-pop)                ;; orig. yank-pop
               ;; M-g bindings in `goto-map'
               ("M-g e"   . consult-compile-error)
               ("M-g f"   . consult-flymake)               ;; Alternative: consult-flycheck
               ("M-g g"   . consult-goto-line)             ;; orig. goto-line
               ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
               ("M-g o"   . consult-outline)               ;; Alternative: consult-org-heading
               ("M-g m"   . consult-mark)
               ("M-g k"   . consult-global-mark)
               ("M-g i"   . consult-imenu)
               ("M-g I"   . consult-imenu-multi)
               ;; M-s bindings in `search-map'
               ("M-s d"   . consult-find)
               ("M-s D"   . consult-locate)
               ("M-s g"   . consult-grep)
               ("M-s G"   . consult-git-grep)
               ("M-s r"   . consult-ripgrep)
               ("M-s l"   . consult-line)
               ("M-s L"   . consult-line-multi)
               ("M-s k"   . consult-keep-lines)
               ("M-s u"   . consult-focus-lines)
               ;; Isearch integration
               ("M-s e"   . consult-isearch-history)
               :map isearch-mode-map
               ("M-e"     . consult-isearch-history)       ;; orig. isearch-edit-string
               ("M-s e"   . consult-isearch-history)       ;; orig. isearch-edit-string
               ("M-s l"   . consult-line)                  ;; needed by consult-line to detect isearch
               ("M-s L"   . consult-line-multi)            ;; needed by consult-line to detect isearch

               ;; Minibuffer history
               :map minibuffer-local-map
               ("M-s" . consult-history)                 ;; orig. next-matching-history-element
               ("M-r" . consult-history))                ;; orig. previous-matching-history-element

        ;; Enable automatic preview at point in the *Completions* buffer. This is
        ;; relevant when you use the default completion UI.
        :hook (completion-list-mode . consult-preview-at-point-mode)

        ;; The :init configuration is always executed (Not lazy)
        :init
        ;; Optionally configure the register formatting. This improves the register
        ;; preview for `consult-register', `consult-register-load',
        ;; `consult-register-store' and the Emacs built-ins.
        (setq register-preview-delay 0.5
              register-preview-function #'consult-register-format)

        ;; Optionally tweak the register preview window.
        ;; This adds thin lines, sorting and hides the mode line of the window.
        (advice-add #'register-preview :override #'consult-register-window)

        ;; Use Consult to select xref locations with preview
        (with-eval-after-load 'xref
          (setq xref-show-xrefs-function #'consult-xref
                xref-show-definitions-function #'consult-xref))

        ;; More utils
        (defvar consult-colors-history nil
          "History for `consult-colors-emacs' and `consult-colors-web'.")

        ;; No longer preloaded in Emacs 28.
        (autoload 'list-colors-duplicates "facemenu")
        ;; No preloaded in consult.el
        (autoload 'consult--read "consult")

        (defun consult-colors-emacs (color)
          "Show a list of all supported colors for a particular frame.

      You can insert the name (default), or insert or kill the hexadecimal or RGB
      value of the selected COLOR."
          (interactive
           (list (consult--read (list-colors-duplicates (defined-colors))
                                :prompt "Emacs color: "
                                :require-match t
                                :category 'color
                                :history '(:input consult-colors-history))))
          (insert color))

        ;; Adapted from counsel.el to get web colors.
        (defun consult-colors--web-list nil
          "Return list of CSS colors for `counsult-colors-web'."
          (require 'shr-color)
          (sort (mapcar #'downcase (mapcar #'car shr-color-html-colors-alist)) #'string-lessp))

        (defun consult-colors-web (color)
          "Show a list of all CSS colors.\

      You can insert the name (default), or insert or kill the hexadecimal or RGB
      value of the selected COLOR."
          (interactive
           (list (consult--read (consult-colors--web-list)
                                :prompt "Color: "
                                :require-match t
                                :category 'color
                                :history '(:input consult-colors-history))))
          (insert color))
        :config
        ;; Optionally configure preview. The default value
        ;; is 'any, such that any key triggers the preview.
        ;; (setq consult-preview-key 'any)
        ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
        (setq consult-preview-key nil)
        ;; For some commands and buffer sources it is useful to configure the
        ;; :preview-key on a per-command basis using the `consult-customize' macro.
        (consult-customize
         consult-line consult-line-multi :preview-key 'any
         consult-buffer consult-recent-file consult-theme :preview-key '(:debounce 1.0 any)
         consult-goto-line :preview-key '(:debounce 0.5 any)
         consult-ripgrep consult-git-grep consult-grep
         ;; :initial (selected-region-or-symbol-at-point)
         :preview-key '(:debounce 0.5 any))

        ;; Optionally configure the narrowing key.
        ;; Both < and C-+ work reasonably well.
        (setq consult-narrow-key "<") ;; "C-+"

        ;; Optionally make narrowing help available in the minibuffer.
        ;; You may want to use `embark-prefix-help-command' or which-key instead.
        (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help))

      (use-package consult-flyspell
        :bind ("M-g s" . consult-flyspell))

      (use-package consult-yasnippet
        :bind ("M-g y" . consult-yasnippet))

      (use-package embark
        :bind (("s-."   . embark-act)
               ("C-s-." . embark-act)
               ("M-."   . embark-dwim)        ; overrides `xref-find-definitions'
               ([remap describe-bindings] . embark-bindings)
               :map minibuffer-local-map
               ("M-." . my-embark-preview))
        :init
        ;; Optionally replace the key help with a completing-read interface
        (setq prefix-help-command #'embark-prefix-help-command)
        :config
        ;; Manual preview for non-Consult commands using Embark
        (defun my-embark-preview ()
          "Previews candidate in vertico buffer, unless it's a consult command."
          (interactive)
          (unless (bound-and-true-p consult--preview-function)
            (save-selected-window
              (let ((embark-quit-after-action nil))
                (embark-dwim)))))

        ;; Hide the mode line of the Embark live/completions buffers
        (add-to-list 'display-buffer-alist
                     '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                       nil
                       (window-parameters (mode-line-format . none))))

        (with-eval-after-load 'which-key
          (defun embark-which-key-indicator ()
            "An embark indicator that displays keymaps using which-key.
      The which-key help message will show the type and value of the
      current target followed by an ellipsis if there are further
      targets."
            (lambda (&optional keymap targets prefix)
              (if (null keymap)
                  (which-key--hide-popup-ignore-command)
                (which-key--show-keymap
                 (if (eq (plist-get (car targets) :type) 'embark-become)
                     "Become"
                   (format "Act on %s '%s'%s"
                           (plist-get (car targets) :type)
                           (embark--truncate-target (plist-get (car targets) :target))
                           (if (cdr targets) "…" "")))
                 (if prefix
                     (pcase (lookup-key keymap prefix 'accept-default)
                       ((and (pred keymapp) km) km)
                       (_ (key-binding prefix 'accept-default)))
                   keymap)
                 nil nil t (lambda (binding)
                             (not (string-suffix-p "-argument" (cdr binding))))))))

          (setq embark-indicators
                '(embark-which-key-indicator
                  embark-highlight-indicator
                  embark-isearch-highlight-indicator))

          (defun embark-hide-which-key-indicator (fn &rest args)
            "Hide the which-key indicator immediately when using the completing-read prompter."
            (which-key--hide-popup-ignore-command)
            (let ((embark-indicators
                   (remq #'embark-which-key-indicator embark-indicators)))
              (apply fn args)))

          (advice-add #'embark-completing-read-prompter
                      :around #'embark-hide-which-key-indicator)))

      (use-package embark-consult
        :bind (:map minibuffer-mode-map
                    ("C-c C-o" . embark-export))
        :hook (embark-collect-mode . consult-preview-at-point-mode))

      ;; Auto completion
      (use-package corfu
        :custom
        (corfu-auto t)
        (corfu-auto-prefix 2)
        (corfu-preview-current nil)
        (corfu-auto-delay 0.2)
        (corfu-popupinfo-delay '(0.4 . 0.2))
        :custom-face
        (corfu-border ((t (:inherit region :background unspecified))))
        :bind ("M-/" . completion-at-point)
        :hook ((after-init . global-corfu-mode)
               (global-corfu-mode . corfu-popupinfo-mode)))

      (unless (display-graphic-p)
        (use-package corfu-terminal
          :hook (global-corfu-mode . corfu-terminal-mode)))

      ;; A few more useful configurations...
      (use-package emacs
        :custom
        ;; TAB cycle if there are only few candidates
        ;; (completion-cycle-threshold 3)

        ;; Enable indentation+completion using the TAB key.
        ;; `completion-at-point' is often bound to M-TAB.
        (tab-always-indent 'complete)

        ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
        ;; try `cape-dict'.
        (text-mode-ispell-word-completion nil)

        ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
        ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
        ;; setting is useful beyond Corfu.
        (read-extended-command-predicate #'command-completion-default-include-p))

      (use-package nerd-icons-corfu
        :ensure t
        :after corfu
        :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

      ;; Add extensions
      (use-package cape
        :init
        (add-to-list 'completion-at-point-functions #'cape-dabbrev)
        (add-to-list 'completion-at-point-functions #'cape-file)
        (add-to-list 'completion-at-point-functions #'cape-elisp-block)
        (add-to-list 'completion-at-point-functions #'cape-keyword)
        (add-to-list 'completion-at-point-functions #'cape-abbrev)

        (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))

      (provide 'init-minibuffer-completion)

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; init-completion.el ends here

#+end_src

#+RESULTS:
: init-minibuffer-completion

* Desktop, Windows and layouts Management
** shackle
https://depp.brause.cc/shackle/

#+begin_src emacs-lisp
  (use-package shackle
    :ensure t
    ;; :defer nil
    :custom
     (shackle-lighter "")
     (shackle-select-reused-windows nil) ; default nil
     (shackle-default-alignment 'below) ; default below
     (shackle-default-size 0.4) ; default 0.5
     (shackle-default-rule '(:select t))
     (shackle-rules
           ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
           '((compilation-mode              :select nil                                                            )
             ("*undo-tree*"                 :size 0.25                         :align right)
             ("*Shell Command Output*"      :select nil                                               )
             ("\\*Async Shell.*\\*"                      :regexp t :ignore t                          )
             (occur-mode                    :select nil                        :align t :size 0.3)
             ("*Help*"                      :select t  :align right :size 0.3 :popup t)
             ;; (help-mode :select t :align right :size 0.3 :popup t)
             (helpful-mode                  :select t                                      :align right)
             ("*Completions*"                                                  :size 0.3  :align t    )
             ("*Messages*"                  :select nil :inhibit-window-quit nil :align below :size 0.3)
             ("\\*[Wo]*Man.*\\*"  :regexp t :select t   :inhibit-window-quit t :other t               )
             ("\\*poporg.*\\*"    :regexp t :select t                          :other t               )
             ("*Calendar*"                  :select t                          :size 0.3  )
             ("*info*"                      :select t   :inhibit-window-quit t  :same t)
             (magit-status-mode             :select t   :inhibit-window-quit t :same t)
             (magit-log-mode                :select t   :inhibit-window-quit t :same t)
             ;; ("*Capture*" :select t :inhibit-window-quit nil :size 0.3 :align right)q
             ;; (org-capture-mode :select t :inhibit-window-quit nil :align right :size 0.4)
             ("*Packages*" :select t :same t)
             (pdf-outline-buffer-mode :select t :align 'below)
             ("*eshell*" :select t :align below :size 0.3 :popup t)
             ("*Gemini*" :select t :align right :size 0.4 :popup t)
             (treemacs-mode                 :select t :inhibit-window-quit t :align left :size 0.4 :popup t)
             ))
     :hook
     (after-init . shackle-mode))

#+end_src
;; Elements of the `shackle-rules' alist:
;;
;; |-----------+------------------------+--------------------------------------------------|
;; | CONDITION | symbol                 | Major mode of the buffer to match                |
;; |           | string                 | Name of the buffer                               |
;; |           |                        | - which can be turned into regexp matching       |
;; |           |                        | by using the :regexp key with a value of t       |
;; |           |                        | in the key-value part                            |
;; |           | list of either         | a list groups either symbols or strings          |
;; |           | symbol or string       | (as described earlier) while requiring at        |
;; |           |                        | least one element to match                       |
;; |           | t                      | t as the fallback rule to follow when no         |
;; |           |                        | other match succeeds.                            |
;; |           |                        | If you set up a fallback rule, make sure         |
;; |           |                        | it's the last rule in shackle-rules,             |
;; |           |                        | otherwise it will always be used.                |
;; |-----------+------------------------+--------------------------------------------------|
;; | KEY-VALUE | :select t              | Select the popped up window. The                 |
;; |           |                        | `shackle-select-reused-windows' option makes     |
;; |           |                        | this the default for windows already             |
;; |           |                        | displaying the buffer.                           |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :inhibit-window-quit t | Special buffers usually have `q' bound to        |
;; |           |                        | `quit-window' which commonly buries the buffer   |
;; |           |                        | and deletes the window. This option inhibits the |
;; |           |                        | latter which is especially useful in combination |
;; |           |                        | with :same, but can also be used with other keys |
;; |           |                        | like :other as well.                             |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :ignore t              | Skip handling the display of the buffer in       |
;; |           |                        | question. Keep in mind that while this avoids    |
;; |           |                        | switching buffers, popping up windows and        |
;; |           |                        | displaying frames, it does not inhibit what may  |
;; |           |                        | have preceded this command, such as the          |
;; |           |                        | creation/update of the buffer to be displayed.   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :same t                | Display buffer in the current window.            |
;; |           | :popup t               | Pop up a new window instead of displaying        |
;; |           | *mutually exclusive*   | the buffer in the current one.                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :other t               | Reuse the window `other-window' would select if  |
;; |           | *must not be used      | there's more than one window open, otherwise pop |
;; |           | with :align, :size*    | up a new window. When used in combination with   |
;; |           |                        | the :frame key, do the equivalent to             |
;; |           |                        | other-frame or a new frame                       |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :align                 | Align a new window at the respective side of     |
;; |           | 'above, 'below,        | the current frame or with the default alignment  |
;; |           | 'left, 'right,         | (customizable with `shackle-default-alignment')  |
;; |           | or t (default)         | by deleting every other window than the          |
;; |           |                        | currently selected one, then wait for the window |
;; |           |                        | to be "dealt" with. This can either happen by    |
;; |           |                        | burying its buffer with q or by deleting its     |
;; |           |                        | window with C-x 0.                               |
;; |           | :size                  | Aligned window use a default ratio of 0.5 to     |
;; |           | a floating point       | split up the original window in half             |
;; |           | value between 0 and 1  | (customizable with `shackle-default-size'), the  |
;; |           | is interpreted as a    | size can be changed on a per-case basis by       |
;; |           | ratio. An integer >=1  | providing a different floating point value like  |
;; |           | is interpreted as a    | 0.33 to make it occupy a third of the original   |
;; |           | number of lines.       | window's size.                                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :frame t               | Pop buffer to a frame instead of a window.       |
;; |-----------+------------------------+--------------------------------------------------|
;;
;; http://emacs.stackexchange.com/a/13687/115
;; Don't show Async Shell Command buffers

** popper
https://github.com/karthink/popper
#+begin_src emacs-lisp
    (use-package popper
      :ensure t
      :bind (("C-`"   . popper-toggle)
             ("M-`"   . popper-cycle)
             ("C-M-`" . popper-toggle-type))
      :custom
      (popper-reference-buffers
            '("\\*Messages\\*"
              "\\*Async Shell Command\\*"
              help-mode
              occur-mode
              eshell-mode
              "^\\*eshell.*\\*$" eshell-mode 
              "^\\*shell.*\\*$"  shell-mode
              ;; ("\\*corfu\\*" . hide)
              (compilation-mode . hide)
              ibuffer-mode
              debugger-mode           
              magit-status-mode
              "*Gemini*"
              ))
      ;; group by project.el, projectile, directory or perspective
      (popper-group-function nil)
      ;; pop in child frame or not
      (popper-display-function #'display-buffer-in-child-frame)
      ;; use `shackle.el' to control popup
      (popper-display-control nil)

      :hook 
      (after-init . popper-mode)
      (after-init . popper-echo-mode)

      :config    
      ;; HACK: close popper window with `C-g'
      (defun +popper-close-window-hack (&rest _)
        "Close popper window via `C-g'."
        (when (and (called-interactively-p 'interactive)
                   (not (region-active-p))
                   popper-open-popup-alist)
          (let ((window (caar popper-open-popup-alist)))
            (when (window-live-p window)
              (delete-window window)))))
      (advice-add #'keyboard-quit-dwim :before #'+popper-close-window-hack)
      )

#+end_src

#+RESULTS:
: popper-toggle-type

** tab-line
# https://www.reddit.com/r/emacs/comments/1c3oqqh/modern_tabs_in_emacs/

#+begin_src emacs-lisp
   ;; Taken from https://andreyor.st/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/
   ;; https://github.com/andreyorst/dotfiles/blob/740d346088ce5a51804724659a895d13ed574f81/.config/emacs/README.org#tabline

  (defun my/set-tab-theme ()
     (let ((bg (face-attribute 'mode-line :background))
           (fg (face-attribute 'default :foreground))
         (hg (face-attribute 'default :background))
           (base (face-attribute 'mode-line :background))
           (box-width (/ (line-pixel-height) 4)))
       (set-face-attribute 'tab-line nil
                 :background base
                 :foreground fg
                 :height 0.8
                 :inherit nil
                 :box (list :line-width -1 :color base)
                 )
       (set-face-attribute 'tab-line-tab nil
                 :foreground fg
                 :background bg
                 :weight 'normal
                 :inherit nil
                 :box (list :line-width box-width :color bg))
       (set-face-attribute 'tab-line-tab-inactive nil
                 :foreground fg
                 :background base
                 :weight 'normal
                 :inherit nil
                 :box (list :line-width box-width :color base))
       (set-face-attribute 'tab-line-highlight nil
                 :foreground fg
                 :background hg
                 :weight 'normal
                 :inherit nil
                 :box (list :line-width box-width :color hg))
       (set-face-attribute 'tab-line-tab-current nil
                 :foreground fg
                 :background hg
                 :weight 'normal
                 :inherit nil
                 :box (list :line-width box-width :color hg))))

   (defun my/tab-line-name-buffer (buffer &rest _buffers)
     "Create name for tab with padding and truncation.
     If buffer name is shorter than `tab-line-tab-max-width' it gets
     centered with spaces, otherwise it is truncated, to preserve
     equal width for all tabs.  This function also tries to fit as
     many tabs in window as possible, so if there are no room for tabs
     with maximum width, it calculates new width for each tab and
     truncates text if needed.  Minimal width can be set with
     `tab-line-tab-min-width' variable."
     (with-current-buffer buffer
       (let* ((window-width (window-width (get-buffer-window)))
              (tab-amount (length (tab-line-tabs-window-buffers)))
              (window-max-tab-width (if (>= (* (+ tab-line-tab-max-width 3) tab-amount) window-width)
                                        (/ window-width tab-amount)
                                      tab-line-tab-max-width))
              (tab-width (- (cond ((> window-max-tab-width tab-line-tab-max-width)
                                   tab-line-tab-max-width)
                                  ((< window-max-tab-width tab-line-tab-min-width)
                                   tab-line-tab-min-width)
                                  (t window-max-tab-width))
                            3)) ;; compensation for ' x ' button
              (buffer-name (string-trim (buffer-name)))
              (name-width (length buffer-name)))
         (if (>= name-width tab-width)
             (concat  " " (truncate-string-to-width buffer-name (- tab-width 2)) "…")
           (let* ((padding (make-string (+ (/ (- tab-width name-width) 2) 1) ?\s))
                  (buffer-name (concat padding buffer-name)))
             (concat buffer-name (make-string (- tab-width (length buffer-name)) ?\s)))))))

   (defun tab-line-close-tab (&optional e)
     "Close the selected tab.
     If tab is presented in another window, close the tab by using
     `bury-buffer` function.  If tab is unique to all existing
     windows, kill the buffer with `kill-buffer` function.  Lastly, if
     no tabs left in the window, it is deleted with `delete-window`
     function."
     (interactive "e")
     (let* ((posnp (event-start e))
            (window (posn-window posnp))
            (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
       (with-selected-window window
         (let ((tab-list (tab-line-tabs-window-buffers))
               (buffer-list (flatten-list
                             (seq-reduce (lambda (list window)
                                           (select-window window t)
                                           (cons (tab-line-tabs-window-buffers) list))
                                         (window-list) nil))))
           (select-window window)
           (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
               (progn
                 (if (eq buffer (current-buffer))
                     (bury-buffer)
                   (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                   (set-window-next-buffers window (delq buffer (window-next-buffers))))
                 (unless (cdr tab-list)
                   (ignore-errors (delete-window window))))
             (and (kill-buffer buffer)
                  (unless (cdr tab-list)
                    (ignore-errors (delete-window window)))))))))

   (use-package tab-line
     :ensure nil
     ;; :hook (after-init . global-tab-line-mode)
     :custom
     (tab-line-tabs-function 'tab-line-tabs-window-buffers)
     :config

     (defcustom tab-line-tab-min-width 10
       "Minimum width of a tab in characters."
       :type 'integer
       :group 'tab-line)

     (defcustom tab-line-tab-max-width 30
       "Maximum width of a tab in characters."
       :type 'integer
       :group 'tab-line)

     (setq tab-line-close-button-show t
           tab-line-new-button-show nil
           tab-line-separator ""
           tab-line-tab-name-function #'my/tab-line-name-buffer
           tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                             'keymap tab-line-right-map
                                             'mouse-face 'tab-line-highlight
                                             'help-echo "Click to scroll right")
           tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                            'keymap tab-line-left-map
                                            'mouse-face 'tab-line-highlight
                                            'help-echo "Click to scroll left")
           tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                             'keymap tab-line-tab-close-map
                                             'mouse-face 'tab-line-close-highlight
                                             'help-echo "Click to close tab"))

     ;; (my/set-tab-theme)

     ;;(dolist (mode '(ediff-mode process-menu-mode term-mode vterm-mode))
     ;;(add-to-list 'tab-line-exclude-modes mode))
     (dolist (mode '(ediff-mode process-menu-mode))
       (add-to-list 'tab-line-exclude-modes mode))

     )

 (use-package bufferlo
  :ensure t
  :init
  (bufferlo-mode))

#+end_src

** persp-mode
#+begin_src emacs-lisp

    ;; (with-eval-after-load "persp-mode-autoloads"
    ;;   (setq wg-morph-on nil) ;; switch off animation
    ;;   (setq persp-autokill-buffer-on-remove 'kill-weak)
    ;;   (add-hook 'window-setup-hook #'(lambda () (persp-mode 1))))

#+end_src

** workgroup2
#+begin_src emacs-lisp
  (use-package workgroups2
    :defer t
    :hook
    (after-init . workgroups-mode)
    :custom
    (wg-prefix-key (kbd "C-c w"))
    (wg-session-file "~/.emacs.d/var/workgroups"))
#+end_src
** desktop save/restore/recovery
#+begin_src emacs-lisp
    (use-package auto-save
      :defer nil
      :vc (:url "https://github.com/manateelazycat/auto-save")
      :init
      (setq auto-save-silent nil)   ; quietly save
      ;; (setq auto-save-delete-trailing-whitespace t)  ; automatically delete spaces at the end of the line when saving
      :config
      (auto-save-enable)
    ;;; custom predicates if you don't want auto save.
    ;;; disable auto save mode when current filetype is an gpg file.
      (setq auto-save-disable-predicates
            '((lambda ()
                (string-suffix-p
                 "gpg"
                 (file-name-extension (buffer-name)) t)))))
  ;; (Require 'auto-save)
  ;; (auto-save-enable)
  ;;     (setq auto-save-silent nil)

    ;; ;; Restore Opened Files
    ;; (progn
    ;;   (desktop-save-mode 1)
    ;;   ;; save when quit
    ;;   (setq desktop-save t)

    ;;   ;; no ask if crashed
    ;;   (setq desktop-load-locked-desktop t)
    ;;   (setq desktop-restore-frames t)
    ;;   (setq desktop-auto-save-timeout 300)

    ;;   ;; save some global vars
    ;;   (setq desktop-globals-to-save nil)
    ;;   ;; 2023-09-16 default
    ;;   ;; '(desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history)
    ;;   (setq desktop-dirname "~/.emacs.d/var/desktop/")
    ;;   )

    ;; ;; (progn
    ;; ;;   (require
  ;; ' desktop-recover)
    ;;   ;; optionallly:
    ;;     (setq desktop-recover-location
    ;;           (desktop-recover-fixdir "~/.emacs.d/var/desktop/"))
    ;;     ;; Brings up the interactive buffer restore menu
    ;;     (desktop-recover-interactive)
    ;;     ;; Note that after using this menu, your desktop will be saved
    ;;     ;; automatically (triggered by the auto-save mechanism).
    ;;     ;; For finer-grained control of the frequency of desktop saves,
    ;;     ;; you can add the standard keybindings to your set-up:
    ;;     (desktop-recover-define-global-key-bindings "\C-c%")
    ;;   )
#+end_src

#+RESULTS:
: t

** treemacs
#+begin_src emacs-lisp
    ;; A tree layout file explorer
  (use-package treemacs
    :commands (treemacs-follow-mode
               treemacs-filewatch-mode
               treemacs-git-mode)
    :custom-face
    (cfrs-border-color ((t (:inherit posframe-border))))
    :bind (([f8]        . treemacs)
           ("M-0"       . treemacs-select-window)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t b"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)
           :map treemacs-mode-map
           ([mouse-1]   . treemacs-single-click-expand-action))
    :config
    (setq treemacs-collapse-dirs           (if treemacs-python-executable 3 0)
          treemacs-missing-project-action  'remove
          treemacs-sorting                 'alphabetic-asc
          treemacs-follow-after-init       t
          treemacs-width                   30
          ;; treemacs-no-png-images           (not centaur-icon)
          )

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (use-package treemacs-nerd-icons
      :demand t
      ;; :when (icons-displayable-p)
      :custom-face
      (treemacs-nerd-icons-root-face ((t (:inherit nerd-icons-green :height 1.3))))
      (treemacs-nerd-icons-file-face ((t (:inherit nerd-icons-dsilver))))
      :config (treemacs-load-theme "nerd-icons"))

    (use-package treemacs-magit
      :hook ((magit-post-commit
              git-commit-post-finish
              magit-post-stage
              magit-post-unstage)
             . treemacs-magit--schedule-update))

    (use-package treemacs-tab-bar
      :demand t
      :config (treemacs-set-scope-type 'Tabs)))

    ;; (treemacs-start-on-boot)
#+end_src

#+RESULTS:
: treemacs-single-click-expand-action

* Gptel-AI copilot
#+begin_src emacs-lisp
  ;; (add-to-list 'load-path "~/.emacs.d/site-lisp/copilot.el-main")
  ;; (require 'copilot)
  ;; (add-hook 'prog-mode-hook 'copilot-mode)
  ;; ;; (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  ;; (define-key copilot-completion-map (kbd "M-w") 'copilot-accept-completion-by-word)
  ;; (define-key copilot-completion-map (kbd "M-q") 'copilot-accept-completion-by-line)

  (use-package gptel
    :ensure nil
    :defer nil
    :vc (:url "https://github.com/karthink/gptel" :rev :newest)
    :config
    ;; default backend configuration
    ;; (setq
    ;;  gptel-model "codegeex4:latest"
    ;;  gptel-backend (gptel-make-ollama "Ollama"
    ;;                  :host "localhost:11434"
    ;;                  :stream t
    ;;                  :models '("codegeex4:latest")))

    ;; DeepSeek offers an OpenAI compatible API
    (defun get-openai-api-key ()
      "Return the OpenAI API key from ~/.authinfo."
      (let ((authinfo-file (expand-file-name "~/.authinfo")))
        (with-temp-buffer
          (insert-file-contents authinfo-file)
          (goto-char (point-min))
          (when (re-search-forward "^machine api\\.deepseek\\.com login apikey password \\(\\S-+\\)$" nil t)
            (match-string 1)))))

    (defvar gptel-make-gemini
      (gptel-make-gemini "Gemini"
        :key "AIzaSyCNSfEqa_MS8PQGuJPNVWwfM0ivkuTe7xM"
        :stream t))
    ;; OPTIONAL configuration
    (setq
     gptel-default-mode 'org-mode
     gptel-model 'gemini-2.0-flash
     gptel-backend gptel-make-gemini)


    )

  (use-package gptel-quick
    :defer nil
    :after gptel
    :vc (gptel-quick :url "https://github.com/karthink/gptel-quick" :rev :newest)
    :config
    (setq gptel-quick-backend gptel-make-gemini
          gptel-quick-model 'gemini-2.0-flash)
    ;; ;; (keymap-set embark-general-map "?" #'gptel-quick)
    ;; :hook （after-init . gptel-quick）
    )

  ;; (use-package immersive-translate
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'elfeed-show-mode-hook #'immersive-translate-setup)
  ;;   (add-hook 'nov-pre-html-render-hook #'immersive-translate-setup)
  ;;   )
  ;; (setq immersive-translate-backend 'DeepSeek
  ;;       immersive-translate-chatgpt-host "api.deepseek.com")
  (use-package go-translate
    ;; (setq gt-langs '(en fr))
    :custom  
    (gt-preset-translators
     `((ts-1 . ,(gt-translator
                 :taker (gt-taker :langs '(en zh) :text 'buffer)
                 :engines (list (gt-google-engine))
                 :render (gt-overlay-render))))))
#+end_src

#+RESULTS:
: api.deepseek.com

* Blog-Publish
#+begin_src emacs-lisp

  (use-package ox-hugo
    :ensure t
    :defer t
    :after ox
    :custom
    (org-hugo-base-dir "~/codebase/blog-bus/dingtele.github.io/"))

  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
            See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (tags (read-from-minibuffer "tags: "))
           (categories (read-from-minibuffer "categories: "))
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title "  :" tags ":" categories)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":END:"
                   "%?\n")                ;Place the cursor here finally
                 "\n")))




#+end_src

* Reading & notes
** Common
#+begin_src emacs-lisp
  (use-package pos-tag-highlight
    :vc (:url "https://github.com/yibie/pos-tag-highlight" :rev :newest))
#+end_src
** Shrface

#+begin_src emacs-lisp
(with-eval-after-load 'nov
  (define-key nov-mode-map (kbd "<tab>") 'shrface-outline-cycle)
  (define-key nov-mode-map (kbd "S-<tab>") 'shrface-outline-cycle-buffer)
  (define-key nov-mode-map (kbd "C-t") 'shrface-toggle-bullets)
  (define-key nov-mode-map (kbd "C-j") 'shrface-next-headline)
  (define-key nov-mode-map (kbd "C-k") 'shrface-previous-headline)
  (define-key nov-mode-map (kbd "M-l") 'shrface-links-counsel) ; or 'shrface-links-helm or 'shrface-links-consult
  (define-key nov-mode-map (kbd "M-h") 'shrface-headline-consult)) ; or 'shrface-headline-helm or 'shrface-headline-consult
#+end_src
** readers
#+begin_src emacs-lisp
  ;;epub reading
  (use-package eww
    :hook (eww-mode . my-nov-font-setup))

  (use-package nov
    :ensure t
    :defer t
    :mode ("\\.epub\\'" . nov-mode)
    :bind (:map nov-mode-map
                ("j" . scroll-up-line)
                ("k" . scroll-down-line)))

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-text-width 80)
  ;; (setq nov-text-width t)
  (setq visual-fill-column-center-text t)
  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'visual-fill-column-mode)

  (add-hook 'nov-mode-hook 'my-nov-font-setup)

  ;;Nov-rendering
  (add-to-list 'load-path "~/.emacs.d/elpa/justify-kp/")
  (require 'justify-kp)
  (use-package justify-kp
    :vc (:url "https://github.com/Fuco1/justify-kp" :rev latest-release) :defer t)

  (setq nov-text-width t)

  (defun my-nov-window-configuration-change-hook ()
    (my-nov-post-html-render-hook)
    (remove-hook 'window-configuration-change-hook
                 'my-nov-window-configuration-change-hook
                 t))
  (defun my-nov-post-html-render-hook ()
    (if (get-buffer-window)
        (let ((max-width (pj-line-width))
              buffer-read-only)
          (save-excursion
            (goto-char (point-min))
            (while (not (eobp))
              (when (not (looking-at "^[[:space:]]*$"))
                (goto-char (line-end-position))
                (when (> (shr-pixel-column) max-width)
                  (goto-char (line-beginning-position))
                  (pj-justify)))
              (forward-line 1))))
      (add-hook 'window-configuration-change-hook
                'my-nov-window-configuration-change-hook
                nil t)))

  (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)

  (require 'pdf-tools)
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install) ; On demand loading, leads to faster startup time

  ;; == Markdown ==
  (use-package markdown-mode
    :ensure t
    :defer t
    :init
    (add-hook 'markdown-mode-hook 'variable-pitch-mode)
    (add-hook 'markdown-mode-hook 'my-nov-font-setup)

    :mode (("\\.text\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode))
    :config
    (markdown-display-inline-images)

    )

  (use-package flyspell
    :defer t
    :diminish (flyspell-mode . " φ"))

  ;;calibre
  (use-package calibredb
    :ensure t
    :defer t
    :commands calibredb
    :bind ("\e\e b" . calibredb)
    :config
    (setq calibredb-root-dir "/Users/dingyu/Documents/calibre")
    (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
    (setq calibredb-library-alist '(("~/Books/books")
                                    ))
    )

  ;; bing-dict
  (use-package bing-dict :ensure t)
  (global-set-key (kbd "C-c d") 'bing-dict-brief)
  (setq bing-dict-vocabulary-save t)
  (setq bing-dict-vocabulary-file "~/Dropbox/vocabulary.org")

  (defun capture-sentence-at-point ()
    "Capture the sentence where the word at point is located."
    (interactive)
    (let* ((word (thing-at-point 'word))  ; Get the word at point
           (sentence (save-excursion
                       (let ((sentence-start (progn
                                               (backward-sentence)  ; Move to the beginning of the sentence
                                               (point)))
                             (sentence-end (progn
                                             (forward-sentence)  ; Move to the end of the sentence
                                             (point))))
                         (message "000-sentence-start: %s\n111-sentence-end: %s\n" sentence-start sentence-end)
                         (buffer-substring-no-properties sentence-start sentence-end)))))  ; Get the sentence text
      (if word
          (message "The word is: %s\nThe sentence is: %s" word sentence)
        (message "No word found at point."))))

  ;; google-translate
  (use-package google-translate
    :defines (google-translate-translation-directions-alist)
    :bind (("C-c g" . google-translate-smooth-translate))
    :config
    (setq google-translate-translation-directions-alist '(("en" . "zh-CN")))
    )

  ;; Atom/RSS reader
  (use-package elfeed
    ;; :pretty-hydra
    ;; ((:title (pretty-hydra-title "Elfeed" 'faicon "nf-fa-rss_square" :face 'nerd-icons-orange)
    ;;   :color amaranth :quit-key ("q" "C-g"))
    ;;  ("Search"
    ;;   (("c" elfeed-db-compact "compact db")
    ;;    ("g" elfeed-search-update--force "refresh")
    ;;    ("G" elfeed-search-fetch "update")
    ;;    ("y" elfeed-search-yank "copy URL")
    ;;    ("+" elfeed-search-tag-all "tag all")
    ;;    ("-" elfeed-search-untag-all "untag all"))
    ;;   "Filter"
    ;;   (("l" elfeed-search-live-filter "live filter")
    ;;    ("s" elfeed-search-set-filter "set filter")
    ;;    ("*" (elfeed-search-set-filter "@6-months-ago +star") "starred")
    ;;    ("a" (elfeed-search-set-filter "@6-months-ago") "all")
    ;;    ("t" (elfeed-search-set-filter "@1-day-ago") "today"))
    ;;   "Article"
    ;;   (("b" elfeed-search-browse-url "browse")
    ;;    ("n" next-line "next")
    ;;    ("p" previous-line "previous")
    ;;    ("u" elfeed-search-tag-all-unread "mark unread")
    ;;    ("r" elfeed-search-untag-all-unread "mark read")
    ;;    ("RET" elfeed-search-show-entry "show"))))
    :bind (("C-x w" . elfeed)
           :map elfeed-search-mode-map
           ("?" . elfeed-hydra/body)
           :map elfeed-show-mode-map
           ("q" . delete-window))
    ;; :hook (elfeed-show-mode . centaur-read-mode)
    :init (setq url-queue-timeout 30
                elfeed-db-directory (locate-user-emacs-file ".elfeed")
                elfeed-show-entry-switch #'pop-to-buffer
                elfeed-show-entry-delete #'delete-window
                elfeed-feeds '(("https://planet.emacslife.com/atom.xml" planet emacslife)
                               ("http://www.masteringemacs.org/feed/" mastering)
                               ("https://oremacs.com/atom.xml" oremacs)
                               ("https://pinecast.com/feed/emacscast" emacscast)
                               ("https://emacstil.com/feed.xml" Emacs TIL)
                               ;; ("https://www.reddit.com/r/emacs.rss" reddit)
                               ))
    :config
    ;; Ignore db directory in recentf
    (push elfeed-db-directory recentf-exclude)

    ;; Add icons via tags
    
    (defun nerd-icon-for-tags (tags)
      "Generate Nerd Font icon based on tags.
    Returns default if no match."
      (cond ((member "youtube" tags)  (nerd-icons-faicon "nf-fa-youtube_play" :face '(:foreground "#FF0200")))
            ((member "instagram" tags) (nerd-icons-faicon "nf-fa-instagram" :face '(:foreground "#FF00B9")))
            ((or (member "emacs" tags) (member "emacslife" tags) (member "mastering" tags))
             (nerd-icons-sucicon "nf-custom-emacs" :face '(:foreground "#9A5BBE")))
            ((member "github" tags) (nerd-icons-faicon "nf-fa-github"))
            (t (nerd-icons-faicon "nf-fae-feedly" :face '(:foreground "#2AB24C")))))

    (defun lucius/elfeed-search-print-entry--better-default (entry)
      "Print ENTRY to the buffer."
      (let* ((date (elfeed-search-format-date (elfeed-entry-date entry)))
             (date-width (car (cdr elfeed-search-date-format)))
             (title (concat (or (elfeed-meta entry :title)
                                (elfeed-entry-title entry) "")
                            ;; NOTE: insert " " for overlay to swallow
                            " "))
             (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
             (feed (elfeed-entry-feed entry))
             (feed-title (when feed (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
             (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
             (tags-str (mapconcat (lambda (s) (propertize s 'face 'elfeed-search-tag-face)) tags ","))
             (title-width (- (frame-width)
                             ;; (window-width (get-buffer-window (elfeed-search-buffer) t))
                             date-width elfeed-search-trailing-width))
             (title-column (elfeed-format-column
                            title (elfeed-clamp
                                   elfeed-search-title-min-width
                                   title-width
                                   elfeed-search-title-max-width) :left))

             ;; Title/Feed ALIGNMENT
             (align-to-feed-pixel (+ date-width
                                     (max elfeed-search-title-min-width
                                          (min title-width elfeed-search-title-max-width)))))
        (insert (propertize date 'face 'elfeed-search-date-face) " ")
        (insert (propertize title-column 'face title-faces 'kbd-help title))
        (put-text-property (1- (point)) (point) 'display `(space :align-to ,align-to-feed-pixel))
        ;; (when feed-title (insert " " (propertize feed-title 'face 'elfeed-search-feed-face) " "))
        (when feed-title
          (insert " " (concat (nerd-icon-for-tags tags) " ")
                  (propertize feed-title 'face 'elfeed-search-feed-face) " "))
        (when tags (insert "(" tags-str ")"))))

    (setq  elfeed-search-print-entry-function #'lucius/elfeed-search-print-entry--better-default)

    ;; Use xwidget if possible
    (with-no-warnings
      (defun my-elfeed-show-visit (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((link (elfeed-entry-link elfeed-show-entry)))
          (when link
            (message "Sent to browser: %s" link)
            (if use-generic-p
                (browse-url-generic link)
              (centaur-browse-url link)))))
      (advice-add #'elfeed-show-visit :override #'my-elfeed-show-visit)

      (defun my-elfeed-search-browse-url (&optional use-generic-p)
        "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
        (interactive "P")
        (let ((entries (elfeed-search-selected)))
          (cl-loop for entry in entries
                   do (elfeed-untag entry 'unread)
                   when (elfeed-entry-link entry)
                   do (if use-generic-p
                          (browse-url-generic it)
                        (centaur-browse-url it)))
          (mapc #'elfeed-search-update-entry entries)
          (unless (or elfeed-search-remain-on-entry (use-region-p))
            (forward-line))))
      (advice-add #'elfeed-search-browse-url :override #'my-elfeed-search-browse-url)))

  ;; Another Atom/RSS reader
  (use-package newsticker
    :ensure nil
    :bind ("C-x W" . newsticker-show-news)
    ;; :hook (newsticker-treeview-item-mode . centaur-read-mode)
    :init (setq newsticker-url-list
                '(("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                  ("Mastering Emacs" "http://www.masteringemacs.org/feed/")
                  ("Oremacs" "https://oremacs.com/atom.xml")
                  ("EmacsCast" "https://pinecast.com/feed/emacscast")
                  ("Emacs TIL" "https://emacstil.com/feed.xml")
                  ;; ("Emacs Reddit" "https://www.reddit.com/r/emacs.rss")
                  )))

#+end_src
** Anki-helper
#+begin_src emacs-lisp
    (use-package anki-helper
      :vc (:url https://github.com/Elilif/emacs-anki-helper)
  :defer t
      :config
      (custom-set-variables
       '(anki-helper-cloze-use-emphasis 'verbatim)
       '(anki-helper-default-note-type "Cloze")
       '(anki-helper-default-deck "org-deck")))
      ;; Make mouse wheel / trackpad scrolling less jerky

#+end_src

#+RESULTS:
: t

* Development Tools
** Eglot
#+begin_src emacs-lisp
    ;; (use-package eglot
    ;;   :defer t
    ;;   :hook
    ;;   ;; (python-ts-mode . eglot-ensure)
    ;;   ;; (clojure-mode . eglot-ensure)
    ;;   ;; (clojure-ts-mode . eglot-ensure)
    ;;   ;; (clojure-ts-clojurescript-mode .eglot-ensure)
    ;;   (eglot-managed-mode . #'my/eglot-capf)
      
    ;;   :config
    ;;   (add-to-list 'eglot-server-programs '(python-mode . ("pyright")))
    ;;   (add-to-list 'eglot-server-programs '(clojure-mode . ("clojure-lsp")))
    ;;   (add-to-list 'eglot-server-programs '(clojure-ts-mode . ("clojure-lsp")))
    ;;   (add-to-list 'eglot-server-programs '(clojure-ts-clojurescript-mode . ("clojure-lsp")))

    ;;   (defun my/eglot-capf ()
    ;;     "Set custom completion-at-point functions for Eglot."
    ;;     (setq-local completion-at-point-functions '(eglot-completion-at-point)))
    ;;   )

    ;; (use-package eglot
    ;;   :hook (eglot-managed-mode . my-eglot-mode-hook)
    ;;   :config
    ;;   (setq eglot-events-buffer-size 0)
    ;;   (setq eglot-events-buffer-config '(:size 0 :format full))
    ;;   (setq eglot-extend-to-xref t)
    ;;   (setq eglot-autoshutdown t)
    ;;   (setq eglot-prefer-plaintext t)
    ;;   (setq eglot-ignored-server-capabilities '(:documentHighlightProvider
    ;;                                             :documentOnTypeFormattingProvider))
    ;;   (setq jsonrpc-default-request-timeout 15)
    ;;   (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename-with-current)
    ;;   (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-override)
    ;;   (define-key eglot-mode-map (kbd "C-c i") 'eglot-code-action-organize-imports)
    ;;   (define-key eglot-mode-map (kbd "C-c h") 'eldoc-box-help-at-point)
    ;;   (define-key eglot-mode-map (kbd "C-c w r") 'eglot-restart-workspace)
    ;;   (define-key eglot-mode-map (kbd "C-c v") 'eglot-find-implementation)
    ;;   (define-key eglot-mode-map (kbd "C-c f") 'eglot-code-actions-current-line)
    ;;   (define-key eglot-mode-map (kbd "C-c a") 'eglot-code-actions))

#+end_src
** Eglot-Java
#+begin_src emacs-lisp
  ;; (require 'eglot)

  ;;   (require 'eglot-java)
  ;;   (add-hook 'java-mode-hook #'eglot-java-mode)
  ;;   (setq eglot-java-server-install-dir "~/codebase/src/java/eclipse.jdt.ls")
  ;;   (setq eglot-java-eclipse-jdt-cache-directory "~/tmp/eglot-eclipse-jdt-cache")
#+end_src

** Database
#+begin_src emacs-lisp

  ;; (require 'ejc-sql)
  ;; (setq clomacs-httpd-default-port 8090) ; Use a port other than 8080.
  ;; ;; Require completion frontend (autocomplete or company). One of them or both.
  ;; (require 'ejc-autocomplete)
  ;; (add-hook 'ejc-sql-minor-mode-hook
  ;;           (lambda ()
  ;;             (auto-complete-mode t)
  ;;             (ejc-ac-setup)))

  ;; (setq ejc-use-flx t)
  ;; (setq ejc-flx-threshold 2)
  ;; (require 'ejc-company)
  ;; (push 'ejc-company-backend company-backends)
  ;; (add-hook 'ejc-sql-minor-mode-hook
  ;;           (lambda ()
  ;;             (company-mode t)))
  ;; (setq ejc-complete-on-dot t)
  ;; ;; (company-quickhelp-mode t)
  ;; (setq ejc-completion-system 'standard)

  ;; (add-hook 'ejc-sql-minor-mode-hook
  ;;           (lambda ()
  ;;             (ejc-eldoc-setup)))
  ;; ;; Performance & output customization
  ;; (add-hook 'ejc-sql-connected-hook
  ;;           (lambda ()
  ;;             (ejc-set-fetch-size 50)
  ;;             (ejc-set-max-rows 50)
  ;;             (ejc-set-show-too-many-rows-message t)
  ;;             (ejc-set-column-width-limit 25)
  ;;             (ejc-set-use-unicode t)))
  ;; (setq ejc-result-table-impl 'ejc-result-mode)
  ;; ;; PostgreSQL example
  ;; (ejc-create-connection
  ;;  "PostgreSQL-db-connection"
  ;;  :classpath (concat "~/.m2/repository/org.postgresql/postgresql/42.6.0/"
  ;;                     "postgresql-42.6.0.jar")
  ;;  :subprotocol "postgresql"
  ;;  :subname "//localhost:5432/postgres"
  ;;  :user "postgres"
  ;;  :password "postgres")

#+end_src

** Tree-sitter: querying and highlighting
#+begin_src emacs-lisp
  (require 'treesit)

    (setq treesit-extra-load-path '("~/codebase/src/tree-sitter-module/dist/"))
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

 ;; Automatic Tree-sitter grammar management
  (use-package treesit-auto
    :hook (after-init . global-treesit-auto-mode)
    :init (setq treesit-auto-install 'prompt))

  ;; Code folding indicators using Tree-sitter
  (use-package treesit-fold-indicators
    :ensure treesit-fold
    :hook (after-init . global-treesit-fold-indicators-mode)
    :init (setq treesit-fold-indicators-priority -1))
#+end_src
** origami
https://github.com/gregsexton/origami.el
#+begin_src emacs-lisp
  (use-package s
    :vc (:url "https://github.com/magnars/s.el" :branch master))
  (require 'dash)
  (use-package origami :ensure t :defer t)
    (with-eval-after-load 'origami
      (define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
      (define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes))
#+end_src
** hideshow-org
#+begin_src emacs-lisp
  ;; (use-package hideshow-org
  ;;   :vc (:url "https://github.com/shanecelis/hideshow-org"))
  ;; (global-set-key (kbd"C-c h") 'hs-org/minor-mode)
#+end_src

#+RESULTS:

** lsp-bridge
#+begin_src emacs-lisp
  ;; (use-package lsp-brigde
  ;;   :vc (:url "https://github.com/manateelazycat/lsp-bridge")
  ;;   :config
  ;;   (global-lsp-bridge-mode))

  ;; (require 'yasnippet)
  ;; (yas-global-mode 1)

#+end_src

* Emacs Dev Tools
** esup
#+begin_src emacs-lisp
(use-package esup
  :ensure t
:defer t
  :commands esup)

#+end_src
** bug-hunter
#+begin_src emacs-lisp


#+end_src
** Rigrep
#+begin_src emacs-lisp
(use-package rg :defer t)
#+end_src
** Magit
** Eshell
#+begin_src emacs-lisp
  ;; eshell
  (use-package xterm-color
    :commands (xterm-color-filter))
  (use-package eshell
:defer t
    :after xterm-color
    :config
    (setq eshell-scroll-to-bottom-on-input t)
    (define-key eshell-mode-map (kbd "<tab>") #'company-complete)
    (define-key eshell-hist-mode-map (kbd "M-r") #'consult-history)
    (add-hook 'eshell-mode-hook
              (lambda ()
                (setenv "TERM" "xterm-256color")))
    (add-hook 'eshell-before-prompt-hook (setq xterm-color-preserve-properties t))
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (setq eshell-output-filter-functions
          (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))


  ;; (use-package eshell
  ;;    :config
  ;;    (setq eshell-scroll-to-bottom-on-input t)
  ;;    (setq-local tab-always-indent 'complete)
  ;;    (setq eshell-history-size 10000)
  ;;    (setq eshell-save-history-on-exit t) ;; Enable history saving on exit
  ;;    (setq eshell-hist-ignoredups t) ;; Ignore duplicatesq
  ;;    :hook
  ;;    (eshell-mode . my/eshell-hook))

  (use-package capf-autosuggest
     :hook
     (eshell-mode . capf-autosuggest-mode))

  (defun my/shell-create (name)
     "Create a custom-named eshell buffer with NAME."
     (interactive "sName: ")
     (eshell 'new)
     (let ((new-buffer-name (concat "*eshell-" name "*")))
       (rename-buffer new-buffer-name t)))

  (global-set-key (kbd "C-c s") #'my/shell-create)

#+end_src
* Coding language
** Common
[[https://github.com/Malabarba/aggressive-indent-mode][- aggressive-indent-mode]]
- [[https://ebzzry.com/en/emacs-pairs/#configuration][smart-paren-mode]]

#+begin_src emacs-lisp
      (global-set-key "\C-h\C-f" 'find-function-at-point)

    ;; Minor mode to aggressively keep your code always indented
    (use-package aggressive-indent
      :diminish
      :hook ((after-init . global-aggressive-indent-mode)
             ;; NOTE: Disable in large files due to the performance issues
             ;; https://github.com/Malabarba/aggressive-indent-mode/issues/73
             ;; (find-file . (lambda ()
             ;;                (when (too-long-file-p)
             ;;                  (aggressive-indent-mode -1))))
             )
      :config
      ;; Disable in some modes
      (dolist (mode '(gitconfig-mode
                      asm-mode web-mode html-mode
                      css-mode css-ts-mode
                      go-mode go-ts-mode
                      python-ts-mode yaml-ts-mode
                      scala-mode
                      shell-mode term-mode vterm-mode
                      prolog-inferior-mode))
        (add-to-list 'aggressive-indent-excluded-modes mode))

      ;; Disable in some commands
        (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)

      ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
      (add-to-list 'aggressive-indent-dont-indent-if
                   '(and (derived-mode-p 'c-mode 'c++-mode 'csharp-mode
                                         'java-mode 'go-mode 'swift-mode)
                         (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                             (thing-at-point 'line)))))
  )


      ;; [indent-bars] Show indent guides
      (use-package indent-bars
        :ensure t
        :hook (prog-mode . indent-bars-mode)
        :config
        (setq indent-bars-display-on-blank-lines nil
              indent-bars-width-frac 0.2
              indent-bars-color '(highlight :face-bg t :blend 0.2)
              indent-bars-zigzag nil
              indent-bars-highlight-current-depth nil
              indent-bars-pattern "."
              indent-bars-prefer-character t)
        )

      ;; usage for cursor movement see [https://ebzzry.com/en/emacs-pairs/#configuration]
      ;; (use-package smartparens-config
      ;;   :ensure smartparens
      ;;   :hook ((prog-mode org-mode) . turn-on-smartparens-strict-mode)
      ;;   :config (progn (show-smartparens-global-mode t)))

    ;; Automatic parenthesis pairing
    (use-package elec-pair
      :ensure nil
      :hook (after-init . electric-pair-mode)
      :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))

#+end_src

#+RESULTS:
| nano-modeline-org-mode | turn-on-smartparens-strict-mode | region-occurrences-highlighter-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-zettel-ref-highlight-setup | #[nil ((add-hook 'after-save-hook 'zz/org-babel-tangle-current-buffer-async 'run-at-end 'only-in-org-mode)) nil] | #[nil ((add-hook 'after-save-hook 'org-babel-tangle :append :local)) nil] | my-nov-font-setup | variable-pitch-mode | toc-org-mode | my/org-prettify-symbols | visual-line-mode | org-tempo-setup | org-block-capf-add-to-completion-at-point-functions | org-appear-mode | #[nil ((display-line-numbers-mode 0)) nil] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** clojure
#+begin_src emacs-lisp
  ;; ;; Enable desired features for all lisp modes
  ;; (require 'clojure-ts-mode)
  ;; (setq clojure-ts-grammar-recipes nil)

  ;; (require 'clojure-mode)
  ;; (setq clojure-indent-style 'always-indent
  ;;       clojure-indent-keyword-style 'always-indent
  ;;       clojure-enable-indent-specs nil)

  ;; (push '(clojure-mode . clojure-ts-mode) major-mode-remap-alist)
  ;; (push '(clojurescript-mode . clojure-ts-clojurescript-mode) major-mode-remap-alist)

  ;; (require 'cljsbuild-mode)
  ;; (require 'elein)

  ;; (add-hook 'after-save-hook #'check-parens nil t)

  ;; (require 'cider)
  ;; (setq nrepl-popup-stacktraces nil)
  ;; (add-hook 'clojure-ts-mode-hook #'cider-mode)

  ;; (with-eval-after-load 'cider
  ;;   (add-hook 'cider-repl-mode-hook 'subword-mode))

  ;; (require 'flycheck-clojure)
  ;; (with-eval-after-load 'clojure-ts-mode
  ;;     (with-eval-after-load 'cider
  ;;       (with-eval-after-load 'flycheck
  ;;         (flycheck-clojure-setup))))

  ;; (unless (package-installed-p 'inf-clojure)
  ;;   (package-refresh-contents)
  ;;   (package-install 'inf-clojure))
  ;; (add-hook 'clojure-mode-hook #'inf-clojure-minor-mode)

#+end_src
** elisp
#+begin_src emacs-lisp
;; Emacs lisp mode
(use-package elisp-mode
  :ensure nil
  :bind (:map emacs-lisp-mode-map
         ("C-c C-x" . ielm)
         ("C-c C-c" . eval-defun)
         ("C-c C-b" . eval-buffer))
  :config
  ;; Syntax highlighting of known Elisp symbols
  (use-package highlight-defined
    :hook ((emacs-lisp-mode inferior-emacs-lisp-mode) . highlight-defined-mode))

  (with-no-warnings
    ;; Align indent keywords
    ;; @see https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned
    (defun my-lisp-indent-function (indent-point state)
      "This function is the normal value of the variable `lisp-indent-function'.
The function `calculate-lisp-indent' calls this to determine
if the arguments of a Lisp function call should be indented specially.

INDENT-POINT is the position at which the line being indented begins.
Point is located at the point to indent under (for default indentation);
STATE is the `parse-partial-sexp' state for that position.

If the current line is in a call to a Lisp function that has a non-nil
property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
it specifies how to indent.  The property value can be:

 `defun', meaning indent `defun'-style
  \(this is also the case if there is no property and the function
  has a name that begins with \"def\", and three or more arguments);

 an integer N, meaning indent the first N arguments specially
  (like ordinary function arguments), and then indent any further
  arguments like a body;

 a function to call that returns the indentation (or nil).
  `lisp-indent-function' calls this function with the same two arguments
  that it itself received.

This function returns either the indentation to use, or nil if the
Lisp function does not specify a special indentation."
      (let ((normal-indent (current-column))
            (orig-point (point)))
        (goto-char (1+ (elt state 1)))
        (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
        (cond
         ;; car of form doesn't seem to be a symbol, or is a keyword
         ((and (elt state 2)
               (or (not (looking-at "\\sw\\|\\s_"))
                   (looking-at ":")))
          (if (not (> (save-excursion (forward-line 1) (point))
                      calculate-lisp-indent-last-sexp))
              (progn (goto-char calculate-lisp-indent-last-sexp)
                     (beginning-of-line)
                     (parse-partial-sexp (point)
                                         calculate-lisp-indent-last-sexp 0 t)))
          ;; Indent under the list or under the first sexp on the same
          ;; line as calculate-lisp-indent-last-sexp.  Note that first
          ;; thing on that line has to be complete sexp since we are
          ;; inside the innermost containing sexp.
          (backward-prefix-chars)
          (current-column))
         ((and (save-excursion
                 (goto-char indent-point)
                 (skip-syntax-forward " ")
                 (not (looking-at ":")))
               (save-excursion
                 (goto-char orig-point)
                 (looking-at ":")))
          (save-excursion
            (goto-char (+ 2 (elt state 1)))
            (current-column)))
         (t
          (let ((function (buffer-substring (point)
                                            (progn (forward-sexp 1) (point))))
                method)
            (setq method (or (function-get (intern-soft function)
                                           'lisp-indent-function)
                             (get (intern-soft function) 'lisp-indent-hook)))
            (cond ((or (eq method 'defun)
                       (and (null method)
                            (length> function 3)
                            (string-match "\\`def" function)))
                   (lisp-indent-defform state indent-point))
                  ((integerp method)
                   (lisp-indent-specform method state
                                         indent-point normal-indent))
                  (method
                   (funcall method indent-point state))))))))
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local lisp-indent-function #'my-lisp-indent-function)))

    ;; Add remove buttons for advices
    (add-hook 'help-mode-hook 'cursor-sensor-mode)

    (defun function-advices (function)
      "Return FUNCTION's advices."
      (let ((flist (indirect-function function)) advices)
        (while (advice--p flist)
          (setq advices `(,@advices ,(advice--car flist)))
          (setq flist (advice--cdr flist)))
        advices))

    (defun add-remove-advice-button (advice function)
      (when (and (functionp advice) (functionp function))
        (let ((inhibit-read-only t)
              (msg (format "Remove advice `%s'" advice)))
          (insert "\t")
          (insert-button
           "Remove"
           'face 'custom-button
           'cursor-sensor-functions `((lambda (&rest _) ,msg))
           'help-echo msg
           'action (lambda (_)
                     (when (yes-or-no-p msg)
                       (message "%s from function `%s'" msg function)
                       (advice-remove function advice)
                       (if (eq major-mode 'helpful-mode)
                           (helpful-update)
                         (revert-buffer nil t))))
           'follow-link t))))

    (defun add-button-to-remove-advice (buffer-or-name function)
      "Add a button to remove advice."
      (with-current-buffer buffer-or-name
        (save-excursion
          (goto-char (point-min))
          (let ((ad-list (function-advices function)))
            (while (re-search-forward "^\\(?:This function has \\)?:[-a-z]+ advice: \\(.+\\)$" nil t)
              (let ((advice (car ad-list)))
                (add-remove-advice-button advice function)
                (setq ad-list (delq advice ad-list))))))))

    (define-advice describe-function-1 (:after (function) advice-remove-button)
      (add-button-to-remove-advice (help-buffer) function))
    (with-eval-after-load 'helpful
      (define-advice helpful-update (:after () advice-remove-button)
        (when helpful--callable-p
          (add-button-to-remove-advice (current-buffer) helpful--sym))))

    ;; Remove hooks
    (defun remove-hook-at-point ()
      "Remove the hook at the point in the *Help* buffer."
      (interactive)
      (unless (memq major-mode '(help-mode helpful-mode))
        (error "Only for help-mode or helpful-mode"))

      (let ((orig-point (point)))
        (save-excursion
          (when-let*
              ((hook (progn (goto-char (point-min)) (symbol-at-point)))
               (func (when (and
                            (or (re-search-forward (format "^Value:?[\s|\n]") nil t)
                                (goto-char orig-point))
                            (sexp-at-point))
                       (end-of-sexp)
                       (backward-char 1)
                       (catch 'break
                         (while t
                           (condition-case _err
                               (backward-sexp)
                             (scan-error (throw 'break nil)))
                           (let ((bounds (bounds-of-thing-at-point 'sexp)))
                             (when (<= (car bounds) orig-point (cdr bounds))
                               (throw 'break (sexp-at-point)))))))))
            (when (yes-or-no-p (format "Remove %s from %s? " func hook))
              (remove-hook hook func)
              (if (eq major-mode 'helpful-mode)
                  (helpful-update)
                (revert-buffer nil t)))))))
    (bind-key "r" #'remove-hook-at-point help-mode-map)))

;; Interactive macro expander
(use-package macrostep
  :bind (:map emacs-lisp-mode-map
         ("C-c e" . macrostep-expand)
         :map lisp-interaction-mode-map
         ("C-c e" . macrostep-expand)))


#+end_src
** python
#+begin_src emacs-lisp
(setq tab-always-indent 'complete)
  (setq python-indent-offset 4)

(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (when (eq major-mode 'compilation-mode)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region compilation-filter-start (point-max)))))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

#+end_src
* Misc
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

;; shell scripts
(setq-default sh-basic-offset 2)
(setq-default sh-indentation 2)

;; No need for ~ files when editing
(setq create-lockfiles nil)

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))


(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))


;; set up for programming languages
;; (require 'highlight-indent-guides)
;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
;; (set-face-background 'highlight-indent-guides-odd-face "darkgray")
;; (set-face-background 'highlight-indent-guides-even-face "dimgray")
;; (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
;; (setq highlight-indent-guides-method 'character)


(use-package plantuml
            :load-path "~/.emacs.d/site-lisp/plantuml-emacs/")
(setq plantuml-jar-path "~/.emacs.d/site-lisp/plantuml-1.2024.6.jar"
      plantuml-output-type "svg"
      plantuml-relative-path "/home/madcomet/Pictures/plantuml-image/"
      plantuml-theme "plain"
      plantuml-font "source code pro medium"
      plantuml-add-index-number t
      plantuml-log-command t
      plantuml-mindmap-contains-org-content t
      plantuml-org-headline-bold t)

(use-package eshell-syntax-highlighting
  :after eshell-mode
  :ensure t ;; Install if not already installed.
  :hook
  ;; Enable in all Eshell buffers.
  (eshell-mode . eshell-syntax-highlighting-global-mode))


(windmove-default-keybindings 'control)


(auth-source-pass-enable)

  (custom-set-variables '(confirm-kill-processes nil))

  (set-language-environment "UTF-8")
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)


  (require 'cl-lib)

  (use-package async)

  (add-hook 'before-save-hook 'time-stamp)

  (custom-set-variables '(kill-whole-line t))

  (custom-set-variables '(mouse-yank-at-point t))

  (setq completion-ignore-case t)
  (custom-set-variables
   '(read-buffer-completion-ignore-case t)
   '(read-file-name-completion-ignore-case t))

  (custom-set-variables '(show-trailing-whitespace nil))

  (use-package imenu-anywhere
    :bind
    ("M-i" . imenu-anywhere))

  (use-package smooth-scrolling
    :hook
    (after-init . smooth-scrolling-mode))

  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (custom-set-variables '(ad-redefinition-action (quote accept)))

  (bind-key "M-`" 'other-frame)

   ;; 将原本放在 .emacs.d 目录下的一些配置信息或动态信息，转移到 etc 或 var 子目录里，让配置目录更加简洁清爽
   (use-package no-littering
     :ensure t :defer t)


#+end_src
** Weather
#+begin_src emacs-lisp
(defvar latitude "31.30883235990429")
(defvar longitude "120.73078133558143")

(defun fetch-weather-data (&rest _)
  "Fetch weather data from API and return weather string."
  (let ((url-request-method "GET")
        (url-request-extra-headers '(("Content-Type" . "application/json")))
        (url (format "https://api.open-meteo.com/v1/forecast?latitude=%s&longitude=%s&daily=weather_code,temperature_2m_max,temperature_2m_min,sunrise,sunset,uv_index_max&timezone=Asia%%2FSingapore&forecast_days=1" latitude longitude)))
    (with-current-buffer (url-retrieve-synchronously url)
      (goto-char (point-min))
      (re-search-forward "^$")
      (let* ((json-data (buffer-substring-no-properties (point) (point-max)))
             (json-obj (json-read-from-string json-data))
             (daily (cdr (assoc 'daily json-obj)))
             (weather-code (aref (cdr (assoc 'weather_code daily)) 0))
             (temp-max (aref (cdr (assoc 'temperature_2m_max daily)) 0))
             (temp-min (aref (cdr (assoc 'temperature_2m_min daily)) 0))
             (sunrise (aref (cdr (assoc 'sunrise daily)) 0))
             (sunset (aref (cdr (assoc 'sunset daily)) 0))
             (uv (uv-to-sunscreen-advice (aref (cdr (assoc 'uv_index_max daily)) 0)))
             (weather-description (weather-code-to-string weather-code))
             (weather-string (format "** Weather: %s\n*** Temperature: %.1f°C-%.1f°C\n*** Daytime: %s-%s\n*** UV: %s"
                                     weather-description temp-min temp-max sunrise sunset uv)))
        weather-string))))

(defun uv-to-sunscreen-advice (uv-index)
  "Return sunscreen advice based on the given UV index."
  (let ((uv-str (number-to-string uv-index)))
    (cond
     ((<= uv-index 2) (concat uv-str " 通常不需要特别防护，但可以考虑使用 SPF 15 的防晒霜。"))
     ((<= uv-index 5) (concat uv-str " 建议使用 SPF 15-30 的防晒霜，尤其是在户外活动时。"))
     ((<= uv-index 7) (concat uv-str " 建议使用 SPF 30-50 的防晒霜，并采取其他防护措施，如戴帽子和太阳镜。"))
     ((<= uv-index 10) (concat uv-str " 建议使用 SPF 50+的防晒霜，并尽量避免在阳光最强的时段外出，同时采取其他防护措施。"))
     ((>= uv-index 11) (concat uv-str " 强烈建议使用 SPF 50+的防晒霜，并采取一切可能的防护措施，如穿长袖衣物、戴帽子和太阳镜，尽量避免暴露在阳光下。"))
     (t "输入的 UV 指数无效。"))))

(defun weather-code-to-string (code)
  "Convert weather CODE to a human-readable string."
  (cond
   ((= code 0) "Clear sky")
   ((= code 1) "Mainly clear")
   ((= code 2) "Partly cloudy")
   ((= code 3) "Overcast")
   ((= code 45) "Fog")
   ((= code 48) "Depositing rime fog")
   ((= code 51) "Drizzle: Light")
   ((= code 53) "Drizzle: Moderate")
   ((= code 55) "Drizzle: Dense intensity")
   ((= code 56) "Freezing Drizzle: Light")
   ((= code 57) "Freezing Drizzle: Dense intensity")
   ((= code 61) "Rain: Slight")
   ((= code 63) "Rain: Moderate")
   ((= code 65) "Rain: Heavy intensity")
   ((= code 66) "Freezing Rain: Light")
   ((= code 67) "Freezing Rain: Heavy intensity")
   ((= code 71) "Snow fall: Slight")
   ((= code 73) "Snow fall: Moderate")
   ((= code 75) "Snow fall: Heavy intensity")
   ((= code 77) "Snow grains")
   ((= code 80) "Rain showers: Slight")
   ((= code 81) "Rain showers: Moderate")
   ((= code 82) "Rain showers: Violent")
   ((= code 85) "Snow showers: Slight")
   ((= code 86) "Snow showers: Heavy")
   ((= code 95) "Thunderstorm: Slight or moderate")
   ((= code 96) "Thunderstorm with slight hail")
   ((= code 99) "Thunderstorm with heavy hail")
   (t "Unknown weather condition")))
#+end_src
