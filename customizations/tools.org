* Package
** package sources
#+begin_src emacs-lisp

(require 'package)

(setq package-archives '(
                         ;; ("melpa-stable" . "http://stable.melpa.org/packages/")
                         ("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ))

#+end_src
** package install
*** package vc usage: https://tony-zorman.com/posts/use-package-vc.html

#+begin_src emacs-lisp

(package-initialize)

(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

;; Auto install the required packages
;; Set missing package vars
(defvar lem-missing-packages '()
  "List populated at startup containing packages needing installation.")
(defvar lem-missing-vc-packages '()
  "List populated at startup containing vc packages requiring installation.")

;; Check for packages
(defun lem-check-missing-packages ()
  "Check for missing packages."
  (interactive)
  ;; Check packages
  (message "%s" "Checking for missing packages.")
  (dolist (p package-selected-packages)
    (unless (package-installed-p p)
      (add-to-list 'lem-missing-packages p 'append)))
  ;; Check vc installed packages (Emacs 29+)
  (when (version< "29" emacs-version)
    (message "%s" "Checking for missing vc packages.")
    (dolist (p package-vc-selected-packages)
      (unless (package-installed-p (car p))
        (add-to-list 'lem-missing-vc-packages (car p) 'append)))))

;; Install packages
(defun lem-install-missing-packages ()
  "Install missing packages from package & package-vc lists."
  (interactive)
  (lem-check-missing-packages)
  (cond ((or lem-missing-packages
             lem-missing-vc-packages)
         (message "Refreshing package database & installing missing packages...")
         (package-install-selected-packages t)
         (setq lem-missing-packages '())
         (package-vc-install-selected-packages)
         (setq lem-missing-vc-packages '()))
        (t
         (message "No missing packages."))))

#+end_src
** modules loading
#+begin_src emacs-lisp
 
(add-to-list 'load-path "~/.emacs.d/vendor")
(add-to-list 'load-path "~/.emacs.d/customizations")
(add-to-list 'load-path "~/.emacs.d/site-lisp/")

(require 'editing) ;; -> F2
(require 'ui) ;; -> F4
(require 'shell-integration)
(require 'navigation) ;; -> F3
(require 'misc)
(require 'init-site-lisp)
(require 'init-core-overriding)
;; Langauage-specific
;; (require 'elisp-editing)
(require 'init-minibuffer-completion)

#+end_src
* Key Binding
** shortcut
#+begin_src emacs-lisp

  ;; 快速打开配置文件
  (defun open-init-file-and-eval()
    (interactive)
    (find-file "~/.emacs.d/init.el")
    (eval-buffer))

  (defun open-editing-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/editing.el"))

  (defun open-navigation-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/navigation.el"))

  (defun open-ui-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/ui.el"))

  (defun open-init-org-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/init-org.el"))

  (defun open-misc-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/misc.el"))

  (defun open-tools-file()
    (interactive)
    (find-file "~/.emacs.d/customizations/tools.org"))

  (global-set-key (kbd "<f1>") 'open-init-file-and-eval)
  (global-set-key (kbd "<f2>") 'open-editing-file)
  (global-set-key (kbd "<f3>") 'open-navigation-file)
  (global-set-key (kbd "<f4>") 'open-ui-file)
  (global-set-key (kbd "<f5>") 'open-init-org-file)
  (global-set-key (kbd "<f6>") 'open-misc-file)
  (global-set-key (kbd "<f9>") 'open-tools-file)

#+end_src
** Meow
** Hydra 
https://github.com/abo-abo/hydra

#+begin_src emacs-lisp
;;design a transient key binding
(use-package hydra
  :defer t)
;;use the macro defhydra to define the hydra and its heads
(defhydra hydra-text-scale (global-map "<f12>")
  "scale text"
  ("j" move-line-up "up")
  ("k" move-line-down "down")
  ("f" nil "finished" :exit t))
;; hercules arrives with any other key binding

#+end_src
* Org Mode
** Org Common
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'toc-org-mode)
  (use-package org-appear
    :ensure t
    :hook (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t)
    (setq org-appear-autosubmarkers t)
    (setq org-appear-autoentities t)
    (setq org-appear-autokeywords t)
    (setq org-appear-inside-latex t)
    )
  (use-package org
    :ensure nil
    :mode ("\\.org\\'" . org-mode)
    :hook 
    ((org-mode . visual-line-mode) 
     (org-mode . my/org-prettify-symbols) 
     )
    :commands (org-find-exact-headline-in-buffer 
               org-set-tags
               )
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    (org-block-begin-line ((t (:underline t :background unspecified))))
    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))
    :config
    (setq org-startup-with-inline-images t)
    ;; ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    ;; (setq org-blank-before-new-entry '((heading . t)
    ;;                                    (plain-list-item . auto)))
    ;; 在org mode里美化字符串
    ;; ================================
    (defun my/org-prettify-symbols ()
      (setq prettify-symbols-alist
     	  (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
     		  '(
     		    ;; ("[ ]"              . 9744)         ; ☐
     		    ;; ("[X]"              . 9745)         ; ☑
     		    ;; ("[-]"              . 8863)         ; ⊟
     		    ("#+begin_src"      . 9998)         ; ✎
     		    ("#+end_src"        . 9633)         ; □
     		    ("#+begin_example"  . 129083)       ; 🠻
     		    ("#+end_example"    . 129081)       ; 🠹
     		    ("#+results:"       . 9776)         ; ☰
     		    ("#+attr_latex:"    . "🄛")
     		    ("#+attr_html:"     . "🄗")
     		    ("#+attr_org:"      . "🄞")
     		    ("#+name:"          . "🄝")         ; 127261
     		    ("#+caption:"       . "🄒")         ; 127250
     		    ("#+date:"          . "📅")         ; 128197
     		    ("#+author:"        . "💁")         ; 128100
     		    ("#+setupfile:"     . 128221)       ; 📝
     		    ("#+email:"         . 128231)       ; 📧
     		    ("#+startup:"       . 10034)        ; ✲
     		    ("#+options:"       . 9965)         ; ⛭
     		    ("#+title:"         . 10162)        ; ➲
     		    ("#+subtitle:"      . 11146)        ; ⮊
     		    ("#+downloaded://///:"    . 8650)         ; ⇊
     		    ("#+language:"      . 128441)       ; 🖹
     		    ("#+begin_quote"    . 187)          ; »
     		    ("#+end_quote"      . 171)          ; «
                      ("#+begin_results"  . 8943)         ; ⋯
                      ("#+end_results"    . 8943)         ; ⋯
     		    )))
      (setq prettify-symbols-unprettify-at-point t)
      (prettify-symbols-mode 1))
    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "◀── now ─────────────────────────────────────────────────")

    ;; Ellipsis styling
    (setq org-ellipsis "…")
    (set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)
    :custom
    ;; 设置Org mode的目录
    (org-directory "~/Dropbox/org")
    ;; 设置笔记的默认存储位置
    (org-default-notes-file (expand-file-name "capture.org" org-directory))
    ;; 启用一些子模块
    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))

    ;; TOOD的关键词设置，可以设置不同的组
    (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
     		       (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))

    ;; 当标题行状态变化时标签同步发生的变化
    ;; Moving a task to CANCELLED adds a CANCELLED tag
    ;; Moving a task to WAIT adds a WAIT tag
    ;; Moving a task to HOLD adds WAIT and HOLD tags
    ;; Moving a task to a done state removes WAIT and HOLD tags
    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
    (org-todo-state-tags-triggers
     (quote (("CANCELLED" ("CANCELLED" . t))
     	   ("WAIT" ("WAIT" . t))
     	   ("HOLD" ("WAIT") ("HOLD" . t))
     	   (done ("WAIT") ("HOLD"))
     	   ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
     	   ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))

    ;; 使用专家模式选择标题栏状态
    (org-use-fast-todo-selection 'expert)
    ;; 父子标题栏状态有依赖
    (org-enforce-todo-dependencies t)
    ;; 标题栏和任务复选框有依赖
    (org-enforce-todo-checkbox-dependencies t)
    ;; 优先级样式设置
    (org-priority-faces '((?A :foreground "red")
             		(?B :foreground "orange")
             		(?C :foreground "yellow")))
    ;; ;; 标题行全局属性设置
    ;; (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
    ;;       					   ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
    ;;       					   ("RISK_ALL" . "Low Medium High")
    ;;       					   ("STYLE_ALL" . "habit")))
    ;; Org columns的默认格式
    ;; (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
    (org-closed-keep-when-no-todo t)
    ;; DONE时加上时间戳
    (org-log-done 'time)
    ;; 重复执行时加上时间戳
    (org-log-repeat 'time)
    ;; Deadline修改时加上一条记录
    (org-log-redeadline 'note)
    ;; Schedule修改时加上一条记录
    (org-log-reschedule 'note)
    ;; 以抽屉的方式记录
    (org-log-into-drawer t)
    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
    (org-log-state-notes-insert-after-drawers nil)

    ;;TODO org-refile 使用缓存 

    ;; 设置标签的默认位置，默认是第77列右对齐
    (org-tags-column -77)
    ;; 自动对齐标签
    (org-auto-align-tags t)
    ;; 标签不继承
    (org-use-tag-inheritance nil)
    ;; 在日程视图的标签不继承
    (org-agenda-use-tag-inheritance nil)
    ;; 标签快速选择
    (org-use-fast-tag-selection t)
    ;; 标签选择不需要回车确认
    (org-fast-tag-selection-single-key t)
    ;; 定义了有序属性的标题行也加上 OREDERD 标签
    (org-track-ordered-property-with-tag t)
    ;; 始终存在的的标签
    (org-tag-persistent-alist '(("read"     . ?r)
     			      ("emacs"    . ?e)
     			      ("study"    . ?s)
     			      ("work"     . ?w)))
    ;; 预定义好的标签
    (org-tag-alist '((:startgroup)
     		   ("linux"    . ?l)
     		   ("apple"    . ?a)
     		   ("noexport" . ?n)
     		   ("ignore"   . ?i)
     		   ("toc"      . ?t)
     		   (:endgroup)))

    ;; 归档设置
    (org-archive-location "%s_archive::datetree/")
    )

#+end_src
** org-babel
#+begin_src emacs-lisp
;;config babel languages
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes));; what is this?

;; structure templates
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (global-set-key (kbd "C-< s") 'tempo-template-org-src-emacs-lisp))
#+end_src
** org-capture
#+begin_src elisp

  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/org/inbox.org")

  (use-package org-capture
    :ensure nil
    :bind ("\e\e c" . (lambda () (interactive) (org-capture)))
    :hook ((org-capture-mode . (lambda ()
                                 (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
           (org-capture-mode . delete-other-windows))
    :custom
    (org-capture-use-agenda-date nil)
    ;; define common template
    (org-capture-templates `(
                             ("t" "Task")
                             ("tt" "Task" entry (file+headline "Task.org" "TO-DO Queque")
                              "** TODO %?   %^g"
                              :prepend t)
                             ("tc" "Class-Schedule" entry (file+headline "Task.org" "Class-Schedule")
                              "* TODO %i%?"
                              :empty-lines-after 1
                              :prepend t)
                             ("n" "Notes" entry (file+headline "Reading-Summary.org" "Notes")
                              "* %? %^g\n%i\n"
                              :empty-lines-after 1)
                             ;; For EWW
                             ;; ("b" "Bookmarks" entry (file+headline "capture.org" "Bookmarks")
                             ;;  "* %:description\n\n%a%?"
                             ;;  :empty-lines 1
                             ;;  :immediate-finish t)
                             ;; ("j" "Journal")
                             ;; ("jt" "Today's TODO" entry (file+olp+datetree "Journal.org" "Today's TODO")
                             ;;  "* TODO %U [/] \n - [ ] %?"
                             ;;  :empty-lines 1
                             ;;  :jump-to-captured t
                             ;;  :prepend f)
                             ("j" "diary" entry (file+olp+datetree "Journal.org")
                              "* %U - :%?"
                              :empty-lines-after 1
                              :prepend f)
                             ("w" "Web site" entry
                              (file "")
                              "* %a :website:\n\n%U %?\n\n%:initial")
                             ))
    )

#+end_src
** org-zettle-ref
#+begin_src emacs-lisp

    (use-package org-zettel-ref-mode
      :ensure nil
      :vc (:url "https://github.com/yibie/org-zettel-ref-mode" :rev :newest)
      ;; :load-path "~/.emacs.d/site-lisp/org-zettel-ref-mode/"
      :init 
      (setq org-zettel-ref-overview-directory "~/Dropbox/Notes")
      :config
      (setq org-zettel-ref-mode-type 'denote)
      ;; (setq org-zettel-ref-mode-type 'org-roam)  
      ;; (setq org-zettel-ref-mode-type 'normal)  
      (setq org-zettel-ref-python-file "~/.emacs.d/elpa/org-zettel-ref-mode/convert-to-org.py")
      (setq org-zettel-ref-temp-folder "~/Dropbox/book-store/temp_convert/")
      (setq org-zettel-ref-reference-folder "~/Dropbox/book-store/converted_org")
      (setq org-zettel-ref-archive-folder "~/Dropbox/book-store/archives/")
      (setq org-zettel-ref-python-environment 'venv)  ; 或 'system, 'venv
  (setq org-zettel-ref-python-env-name "venv")  ; 如果使用 Conda 或 venv
      (setq org-zettel-ref-debug t))
#+end_src
** org-calendar
#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :hook (calendar-today-visible . calendar-mark-today)
    :custom
    ;; 是否显示中国节日，我们使用 `cal-chinese-x' 插件
    (calendar-chinese-all-holidays-flag nil)
    ;; 是否显示节日
    (calendar-mark-holidays-flag t)
    ;; 是否显示Emacs的日记，我们使用org的日记
    (calendar-mark-diary-entries-flag nil)
    ;; 数字方式显示时区，如 +0800，默认是字符方式如 CST
    (calendar-time-zone-style 'numeric)
    ;; 日期显示方式：year/month/day
    (calendar-date-style 'iso)
    ;; 中文天干地支设置
    (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
    (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
    ;; 设置中文月份
    (calendar-month-name-array ["一月" "二月" "三月" "四月" "五月" "六月" "七月" "八月" "九月" "十月" "十一月" "十二月"])
    ;; 设置星期标题显示
    (calendar-day-name-array ["日" "一" "二" "三" "四" "五" "六"])
    ;; 周一作为一周第一天
    (calendar-week-start-day 1)
    )

  ;; 时间解析增加中文拼音
  (use-package parse-time
    :ensure nil
    :defer t
    :config
    (setq parse-time-months
          (append '(("yiy" . 1) ("ery" . 2) ("sany" . 3)
                    ("siy" . 4) ("wuy" . 5) ("liuy" . 6)
                    ("qiy" . 7) ("bay" . 8) ("jiuy" . 9)
                    ("shiy" . 10) ("shiyiy" . 11) ("shiery" . 12)
                    ("yiyue" . 1) ("eryue" . 2) ("sanyue" . 3)
                    ("siyue" . 4) ("wuyue" . 5) ("liuyue" . 6)
                    ("qiyue" . 7) ("bayue" . 8) ("jiuyue" . 9)
                    ("shiyue" . 10) ("shiyiyue" . 11) ("shieryue" . 12))
                  parse-time-months))

    (setq parse-time-weekdays
          (append '(("zri" . 0) ("zqi" . 0)
                    ("zyi" . 1) ("zer" . 2) ("zsan" . 3)
                    ("zsi" . 4) ("zwu" . 5) ("zliu" . 6)
                    ("zr" . 0) ("zq" . 0)
                    ("zy" . 1) ("ze" . 2) ("zs" . 3)
                    ("zsi" . 4) ("zw" . 5) ("zl" . 6))
                  parse-time-weekdays)))

  ;; 中国节日设置
  (use-package cal-china-x
    :ensure t
    :commands cal-china-x-setup
    :hook (after-init . cal-china-x-setup)
    :config
    ;; 重要节日设置
    (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
    ;; 所有节日设置
    (setq cal-china-x-general-holidays
          '(;;公历节日
            (holiday-fixed 1 1 "元旦")
            (holiday-fixed 2 14 "情人节")
            (holiday-fixed 3 8 "妇女节")
            (holiday-fixed 3 14 "白色情人节")
            (holiday-fixed 4 1 "愚人节")
            (holiday-fixed 5 1 "劳动节")
            (holiday-fixed 5 4 "青年节")
            (holiday-float 5 0 2 "母亲节")
            (holiday-fixed 6 1 "儿童节")
            (holiday-float 6 0 3 "父亲节")
            (holiday-fixed 9 10 "教师节")
            (holiday-fixed 10 1 "国庆节")
            (holiday-fixed 10 2 "国庆节")
            (holiday-fixed 10 3 "国庆节")
            (holiday-fixed 10 24 "程序员节")
            (holiday-fixed 11 11 "双11购物节")
            (holiday-fixed 12 25 "圣诞节")
            ;; 农历节日
            (holiday-lunar 12 30 "春节" 0)
            (holiday-lunar 1 1 "春节" 0)
            (holiday-lunar 1 2 "春节" 0)
            (holiday-lunar 1 15 "元宵节" 0)
            (holiday-solar-term "清明" "清明节")
            (holiday-solar-term "小寒" "小寒")
            (holiday-solar-term "大寒" "大寒")
            (holiday-solar-term "立春" "立春")
            (holiday-solar-term "雨水" "雨水")
            (holiday-solar-term "惊蛰" "惊蛰")
            (holiday-solar-term "春分" "春分")
            (holiday-solar-term "谷雨" "谷雨")
            (holiday-solar-term "立夏" "立夏")
            (holiday-solar-term "小满" "小满")
            (holiday-solar-term "芒种" "芒种")
            (holiday-solar-term "夏至" "夏至")
            (holiday-solar-term "小暑" "小暑")
            (holiday-solar-term "大暑" "大暑")
            (holiday-solar-term "立秋" "立秋")
            (holiday-solar-term "处暑" "处暑")
            (holiday-solar-term "白露" "白露")
            (holiday-solar-term "秋分" "秋分")
            (holiday-solar-term "寒露" "寒露")
            (holiday-solar-term "霜降" "霜降")
            (holiday-solar-term "立冬" "立冬")
            (holiday-solar-term "小雪" "小雪")
            (holiday-solar-term "大雪" "大雪")
            (holiday-solar-term "冬至" "冬至")
            (holiday-lunar 5 5 "端午节" 0)
            (holiday-lunar 8 15 "中秋节" 0)
            (holiday-lunar 7 7 "七夕情人节" 0)
            (holiday-lunar 12 8 "腊八节" 0)
            (holiday-lunar 9 9 "重阳节" 0)))
    ;; 设置日历的节日，通用节日已经包含了所有节日
    (setq calendar-holidays (append cal-china-x-general-holidays)))

#+end_src
** Org-roam
*** org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/Dropbox/org-roam-files/"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

#+end_src
*** org-roam-ui
org-roam-ui requires org-roam, websocket, simple-httpd, f and Emacs >= 27 for fast JSON parsing.
** org-modern
#+begin_src emacs-lisp
(require 'org-modern)
;; Option 1: Per buffer
(add-hook 'org-mode-hook #'org-modern-mode)
(add-hook 'org-agenda-finalize-hook #'org-modern-agenda)

(setq
 ;; Edit settings
 org-auto-align-tags nil
 org-tags-column 0
 org-catch-invisible-edits 'show-and-error
 org-special-ctrl-a/e t
 org-insert-heading-respect-content t

 ;; Org styling, hide markup etc.
 org-hide-emphasis-markers t
 org-pretty-entities t

 ;; Agenda styling
 org-agenda-tags-column 0
 org-agenda-block-separator ?─
 org-agenda-time-grid
 '((daily today require-timed)
   (800 1000 1200 1400 1600 1800 2000)
   " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
 org-agenda-current-time-string
 "◀── now ─────────────────────────────────────────────────")

;; Ellipsis styling
(setq org-ellipsis "…")
(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)

(use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)
  ;; 复选框美化
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
  (setq org-modern-block-fringe t)
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name nil)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword nil)
  )

#+end_src
** org-remark
#+begin_src emacs-lisp
(use-package org-remark
  :bind (;; :bind keyword also implicitly defers org-remark itself.
         ;; Keybindings before :map is set for global-map.
         ("C-c n m" . org-remark-mark)
         ("C-c n l" . org-remark-mark-line)
         :map org-remark-mode-map
         ("C-c n o" . org-remark-open)
         ("C-c n ]" . org-remark-view-next)
         ("C-c n [" . org-remark-view-prev)
         ("C-c n r" . org-remark-remove)
         ("C-c n d" . org-remark-delete))
  ;; Alternative way to enable `org-remark-global-tracking-mode' in
  ;; `after-init-hook'.
  ;; :hook (after-init . org-remark-global-tracking-mode)
  :init
  ;; It is recommended that `org-remark-global-tracking-mode' be
  ;; enabled when Emacs initializes. Alternatively, you can put it to
  ;; `after-init-hook' as in the comment above
  (org-remark-global-tracking-mode +1)
  ;; :config
  ;; (use-package org-remark-info :after info :config (org-remark-info-mode +1))
  ;; (use-package org-remark-eww  :after eww  :config (org-remark-eww-mode +1))
  ;; (use-package org-remark-nov  :after nov  :config (org-remark-nov-mode +1))
  )
#+end_src
* Desktop, window  and layouts
** shackle 
https://depp.brause.cc/shackle/

#+begin_src emacs-lisp
  (use-package shackle
      :config
      (progn
        (setq shackle-lighter "")
        (setq shackle-select-reused-windows nil) ; default nil
        (setq shackle-default-alignment 'below) ; default below
        (setq shackle-default-size 0.4) ; default 0.5

        (setq shackle-rules
              ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
              '((compilation-mode              :select nil                                               )
                ("*undo-tree*"                                                    :size 0.25 :align right)
                ("*eshell*"                    :select t                          :other t               )
                ("*Shell Command Output*"      :select nil                                               )
                ("\\*Async Shell.*\\*"                      :regexp t :ignore t                          )
                (occur-mode                    :select nil                                   :align t     :size 0.3)
                ("*Help*"                      :select t   :inhibit-window-quit nil :other t   :align right)
                (helpful-mode                  :select nil                                   :align right :size 0.3)
                ("*Completions*"                                                  :size 0.3  :align t    )
                ("*Messages*"                  :select nil :inhibit-window-quit nil :align right :size 0.3 :popup t)
                ("\\*[Wo]*Man.*\\*"  :regexp t :select t   :inhibit-window-quit t :other t               )
                ("\\*poporg.*\\*"    :regexp t :select t                          :other t               )
                ("\\`\\*helm.*?\\*\\'" :regexp t                                  :size 0.3  :align t    )
                ("*Calendar*"                  :select t                          :size 0.3  )
                ("*info*"                      :select t   :inhibit-window-quit t                         :same t)
                (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
                (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
  	      ("*Capture*" :select t :inhibit-window-quit nil :size 0.3 :align right)
                (org-capture-mode :select t :inhibit-window-quit nil :align right :size 0.4)
                ))

        (shackle-mode 1)))

#+end_src
;; Elements of the `shackle-rules' alist:
;;
;; |-----------+------------------------+--------------------------------------------------|
;; | CONDITION | symbol                 | Major mode of the buffer to match                |
;; |           | string                 | Name of the buffer                               |
;; |           |                        | - which can be turned into regexp matching       |
;; |           |                        | by using the :regexp key with a value of t       |
;; |           |                        | in the key-value part                            |
;; |           | list of either         | a list groups either symbols or strings          |
;; |           | symbol or string       | (as described earlier) while requiring at        |
;; |           |                        | least one element to match                       |
;; |           | t                      | t as the fallback rule to follow when no         |
;; |           |                        | other match succeeds.                            |
;; |           |                        | If you set up a fallback rule, make sure         |
;; |           |                        | it's the last rule in shackle-rules,             |
;; |           |                        | otherwise it will always be used.                |
;; |-----------+------------------------+--------------------------------------------------|
;; | KEY-VALUE | :select t              | Select the popped up window. The                 |
;; |           |                        | `shackle-select-reused-windows' option makes     |
;; |           |                        | this the default for windows already             |
;; |           |                        | displaying the buffer.                           |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :inhibit-window-quit t | Special buffers usually have `q' bound to        |
;; |           |                        | `quit-window' which commonly buries the buffer   |
;; |           |                        | and deletes the window. This option inhibits the |
;; |           |                        | latter which is especially useful in combination |
;; |           |                        | with :same, but can also be used with other keys |
;; |           |                        | like :other as well.                             |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :ignore t              | Skip handling the display of the buffer in       |
;; |           |                        | question. Keep in mind that while this avoids    |
;; |           |                        | switching buffers, popping up windows and        |
;; |           |                        | displaying frames, it does not inhibit what may  |
;; |           |                        | have preceded this command, such as the          |
;; |           |                        | creation/update of the buffer to be displayed.   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :same t                | Display buffer in the current window.            |
;; |           | :popup t               | Pop up a new window instead of displaying        |
;; |           | *mutually exclusive*   | the buffer in the current one.                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :other t               | Reuse the window `other-window' would select if  |
;; |           | *must not be used      | there's more than one window open, otherwise pop |
;; |           | with :align, :size*    | up a new window. When used in combination with   |
;; |           |                        | the :frame key, do the equivalent to             |
;; |           |                        | other-frame or a new frame                       |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :align                 | Align a new window at the respective side of     |
;; |           | 'above, 'below,        | the current frame or with the default alignment  |
;; |           | 'left, 'right,         | (customizable with `shackle-default-alignment')  |
;; |           | or t (default)         | by deleting every other window than the          |
;; |           |                        | currently selected one, then wait for the window |
;; |           |                        | to be "dealt" with. This can either happen by    |
;; |           |                        | burying its buffer with q or by deleting its     |
;; |           |                        | window with C-x 0.                               |
;; |           | :size                  | Aligned window use a default ratio of 0.5 to     |
;; |           | a floating point       | split up the original window in half             |
;; |           | value between 0 and 1  | (customizable with `shackle-default-size'), the  |
;; |           | is interpreted as a    | size can be changed on a per-case basis by       |
;; |           | ratio. An integer >=1  | providing a different floating point value like  |
;; |           | is interpreted as a    | 0.33 to make it occupy a third of the original   |
;; |           | number of lines.       | window's size.                                   |
;; |-----------+------------------------+--------------------------------------------------|
;; |           | :frame t               | Pop buffer to a frame instead of a window.       |
;; |-----------+------------------------+--------------------------------------------------|
;;
;; http://emacs.stackexchange.com/a/13687/115
;; Don't show Async Shell Command buffers

** popper
https://github.com/karthink/popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("C-`"   . popper-toggle)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Async Shell Command\\*"
            help-mode
            helpful-mode
            occur-mode
            pass-view-mode
            "^\\*eshell.*\\*$" eshell-mode ;; eshell as a popup
            "^\\*shell.*\\*$"  shell-mode  ;; shell as a popup
            ("\\*corfu\\*" . hide)
            (compilation-mode . hide)
            ibuffer-mode
            debugger-mode
            ;; derived from `fundamental-mode' and fewer than 10 lines will be considered a popup
            (lambda (buf) (with-current-buffer buf
                            (and (derived-mode-p 'fundamental-mode)
                                 (< (count-lines (point-min) (point-max))
                                    10))))
            )
          )
    (popper-mode +1)
    (popper-echo-mode +1)
    :config
    ;; group by project.el, projectile, directory or perspective
    (setq popper-group-function nil)

    ;; pop in child frame or not
    (setq popper-display-function #'display-buffer-in-child-frame)

    ;; use `shackle.el' to control popup
    (setq popper-display-control nil)
    )

#+end_src
** tab-line
https://www.reddit.com/r/emacs/comments/1c3oqqh/modern_tabs_in_emacs/

#+begin_src emacs-lisp 
;; Taken from https://andreyor.st/posts/2020-05-10-making-emacs-tabs-look-like-in-atom/
;; https://github.com/andreyorst/dotfiles/blob/740d346088ce5a51804724659a895d13ed574f81/.config/emacs/README.org#tabline

(defun my/set-tab-theme ()
  (let ((bg (face-attribute 'mode-line :background))
        (fg (face-attribute 'default :foreground))
	(hg (face-attribute 'default :background))
        (base (face-attribute 'mode-line :background))
        (box-width (/ (line-pixel-height) 4)))
    (set-face-attribute 'tab-line nil
			:background base
			:foreground fg
			:height 0.8
			:inherit nil
			:box (list :line-width -1 :color base)
			)
    (set-face-attribute 'tab-line-tab nil
			:foreground fg
			:background bg
			:weight 'normal
			:inherit nil
			:box (list :line-width box-width :color bg))
    (set-face-attribute 'tab-line-tab-inactive nil
			:foreground fg
			:background base
			:weight 'normal
			:inherit nil
			:box (list :line-width box-width :color base))
    (set-face-attribute 'tab-line-highlight nil
			:foreground fg
			:background hg
			:weight 'normal
			:inherit nil
			:box (list :line-width box-width :color hg))
    (set-face-attribute 'tab-line-tab-current nil
			:foreground fg
			:background hg
			:weight 'normal
			:inherit nil
			:box (list :line-width box-width :color hg))))

(defun my/tab-line-name-buffer (buffer &rest _buffers)
  "Create name for tab with padding and truncation.
If buffer name is shorter than `tab-line-tab-max-width' it gets
centered with spaces, otherwise it is truncated, to preserve
equal width for all tabs.  This function also tries to fit as
many tabs in window as possible, so if there are no room for tabs
with maximum width, it calculates new width for each tab and
truncates text if needed.  Minimal width can be set with
`tab-line-tab-min-width' variable."
  (with-current-buffer buffer
    (let* ((window-width (window-width (get-buffer-window)))
           (tab-amount (length (tab-line-tabs-window-buffers)))
           (window-max-tab-width (if (>= (* (+ tab-line-tab-max-width 3) tab-amount) window-width)
                                     (/ window-width tab-amount)
                                   tab-line-tab-max-width))
           (tab-width (- (cond ((> window-max-tab-width tab-line-tab-max-width)
                                tab-line-tab-max-width)
                               ((< window-max-tab-width tab-line-tab-min-width)
                                tab-line-tab-min-width)
                               (t window-max-tab-width))
                         3)) ;; compensation for ' x ' button
           (buffer-name (string-trim (buffer-name)))
           (name-width (length buffer-name)))
      (if (>= name-width tab-width)
          (concat  " " (truncate-string-to-width buffer-name (- tab-width 2)) "…")
        (let* ((padding (make-string (+ (/ (- tab-width name-width) 2) 1) ?\s))
               (buffer-name (concat padding buffer-name)))
          (concat buffer-name (make-string (- tab-width (length buffer-name)) ?\s)))))))

(defun tab-line-close-tab (&optional e)
  "Close the selected tab.
If tab is presented in another window, close the tab by using
`bury-buffer` function.  If tab is unique to all existing
windows, kill the buffer with `kill-buffer` function.  Lastly, if
no tabs left in the window, it is deleted with `delete-window`
function."
  (interactive "e")
  (let* ((posnp (event-start e))
         (window (posn-window posnp))
         (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
    (with-selected-window window
      (let ((tab-list (tab-line-tabs-window-buffers))
            (buffer-list (flatten-list
                          (seq-reduce (lambda (list window)
                                        (select-window window t)
                                        (cons (tab-line-tabs-window-buffers) list))
                                      (window-list) nil))))
        (select-window window)
        (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
            (progn
              (if (eq buffer (current-buffer))
                  (bury-buffer)
                (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                (set-window-next-buffers window (delq buffer (window-next-buffers))))
              (unless (cdr tab-list)
                (ignore-errors (delete-window window))))
          (and (kill-buffer buffer)
               (unless (cdr tab-list)
                 (ignore-errors (delete-window window)))))))))

(unless (version< emacs-version "27")
  (use-package tab-line
    :ensure nil
    :hook (after-init . global-tab-line-mode)
    :config

    (defcustom tab-line-tab-min-width 10
      "Minimum width of a tab in characters."
      :type 'integer
      :group 'tab-line)

    (defcustom tab-line-tab-max-width 30
      "Maximum width of a tab in characters."
      :type 'integer
      :group 'tab-line)

    (setq tab-line-close-button-show t
          tab-line-new-button-show nil
          tab-line-separator ""
          tab-line-tab-name-function #'my/tab-line-name-buffer
          tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                            'keymap tab-line-right-map
                                            'mouse-face 'tab-line-highlight
                                            'help-echo "Click to scroll right")
          tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                           'keymap tab-line-left-map
                                           'mouse-face 'tab-line-highlight
                                           'help-echo "Click to scroll left")
          tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                            'keymap tab-line-tab-close-map
                                            'mouse-face 'tab-line-close-highlight
                                            'help-echo "Click to close tab"))

    (my/set-tab-theme)

    ;;(dolist (mode '(ediff-mode process-menu-mode term-mode vterm-mode))
    ;;(add-to-list 'tab-line-exclude-modes mode))
    (dolist (mode '(ediff-mode process-menu-mode))
      (add-to-list 'tab-line-exclude-modes mode))
    ))

(global-tab-line-mode t)
#+end_src
** workgroup2
#+begin_src emacs-lisp
(use-package workgroups2
      :init (setq wg-prefix-key (kbd "C-c w"))
      :config
      (workgroups-mode 1)
      (setq wg-session-file "~/.emacs.d/var/workgroups"))
#+end_src
** desktop save/restore/recovery
#+begin_src emacs-lisp

    ;; Restore Opened Files
    ;; (progn
    ;;   (desktop-save-mode 1)
    ;;   ;; save when quit
    ;;   (setq desktop-save t)

    ;;   ;; no ask if crashed
    ;;   (setq desktop-load-locked-desktop t)
    ;;   (setq desktop-restore-frames t)
    ;;   (setq desktop-auto-save-timeout 300)

    ;;   ;; save some global vars
    ;;   (setq desktop-globals-to-save nil)
    ;;   ;; 2023-09-16 default
    ;;   ;; '(desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history)
    ;;   (setq desktop-dirname "~/.emacs.d/var/desktop/")
    ;; )

    ;; (progn
    ;;   (require ' desktop-recover)
    ;;   ;; optionallly:
    ;;   (setq desktop-recover-location
    ;;         (desktop-recover-fixdir "~/.emacs.d/var/desktop/")) 
    ;;   ;; Brings up the interactive buffer restore menu
    ;;   (desktop-recover-interactive)
    ;;   ;; Note that after using this menu, your desktop will be saved
    ;;   ;; automatically (triggered by the auto-save mechanism).
    ;;   ;; For finer-grained control of the frequency of desktop saves,
    ;;   ;; you can add the standard keybindings to your set-up:
    ;;   (desktop-recover-define-global-key-bindings "\C-c%")
    ;; )
#+end_src
* Gptel -AI copilot
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/copilot.el-main")
  (require 'copilot)
  (add-hook 'prog-mode-hook 'copilot-mode)
  ;; (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  (define-key copilot-completion-map (kbd "M-w") 'copilot-accept-completion-by-word)
  (define-key copilot-completion-map (kbd "M-q") 'copilot-accept-completion-by-line)

  (use-package gptel
    :ensure t
    :config
    ;; default backend configuration
    ;; (setq
    ;;  gptel-model "codegeex4:latest"
    ;;  gptel-backend (gptel-make-ollama "Ollama"
    ;;                  :host "localhost:11434"
    ;;                  :stream t
    ;;                  :models '("codegeex4:latest")))

    ;; DeepSeek offers an OpenAI compatible API
    (defun get-openai-api-key ()
      "Return the OpenAI API key from ~/.authinfo."
      (let ((authinfo-file (expand-file-name "~/.authinfo")))
        (with-temp-buffer
          (insert-file-contents authinfo-file)
          (goto-char (point-min))
          (when (re-search-forward "^machine api\\.deepseek\\.com login apikey password \\(\\S-+\\)$" nil t)
            (match-string 1)))))

    (setq gptel-model   "deepseek-chat"
          gptel-backend
          (gptel-make-openai "DeepSeek"     ;Any name you want
            :host "api.deepseek.com"
            :endpoint "/chat/completions"
            :stream t
            :key (get-openai-api-key)             ;can be a function that returns the key
            :models '("deepseek-chat" "deepseek-coder")))

    )

  (use-package immersive-translate
    :ensure t
    :config
    (add-hook 'elfeed-show-mode-hook #'immersive-translate-setup)
    (add-hook 'nov-pre-html-render-hook #'immersive-translate-setup)
    )
  (setq immersive-translate-backend 'DeepSeek
        immersive-translate-chatgpt-host "api.deepseek.com")

#+end_src

#+RESULTS:
: api.deepseek.com

* Blog-Publish
#+begin_src emacs-lisp

(use-package ox-hugo
  :ensure t
  :after ox)

#+end_src

* Reading
** Common
*** Shrface

#+begin_src emacs-lisp
(with-eval-after-load 'nov
  (define-key nov-mode-map (kbd "<tab>") 'shrface-outline-cycle)
  (define-key nov-mode-map (kbd "S-<tab>") 'shrface-outline-cycle-buffer)
  (define-key nov-mode-map (kbd "C-t") 'shrface-toggle-bullets)
  (define-key nov-mode-map (kbd "C-j") 'shrface-next-headline)
  (define-key nov-mode-map (kbd "C-k") 'shrface-previous-headline)
  (define-key nov-mode-map (kbd "M-l") 'shrface-links-counsel) ; or 'shrface-links-helm or 'shrface-links-consult
  (define-key nov-mode-map (kbd "M-h") 'shrface-headline-consult)) ; or 'shrface-headline-helm or 'shrface-headline-consult
#+end_src
*** readers
#+begin_src emacs-lisp
  ;;epub reading
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode)
    :bind (:map nov-mode-map
                ("j" . scroll-up-line)
                ("k" . scroll-down-line)))

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-text-width 80)
  ;; (setq nov-text-width t)
  (setq visual-fill-column-center-text t)
  (add-hook 'nov-mode-hook 'visual-line-mode)
  (add-hook 'nov-mode-hook 'visual-fill-column-mode)

  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "LXGW WenKai Mono Regular"
                             :height 1.0))
  (add-hook 'nov-mode-hook 'my-nov-font-setup)

  ;;nov-rendering
  (use-package justify-kp
    :ensure t
    :vc (:url "https://github.com/Fuco1/justify-kp"))
  (setq nov-text-width t)

  (defun my-nov-window-configuration-change-hook ()
    (my-nov-post-html-render-hook)
    (remove-hook 'window-configuration-change-hook
                 'my-nov-window-configuration-change-hook
                 t))
  (defun my-nov-post-html-render-hook ()
    (if (get-buffer-window)
        (let ((max-width (pj-line-width))
              buffer-read-only)
          (save-excursion
            (goto-char (point-min))
            (while (not (eobp))
              (when (not (looking-at "^[[:space:]]*$"))
                (goto-char (line-end-position))
                (when (> (shr-pixel-column) max-width)
                  (goto-char (line-beginning-position))
                  (pj-justify)))
              (forward-line 1))))
      (add-hook 'window-configuration-change-hook
                'my-nov-window-configuration-change-hook
                nil t)))

  (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)

  (require 'pdf-tools)
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install) ; On demand loading, leads to faster startup time

  ;;calibre
  (use-package calibredb
    :ensure t
    :commands calibredb
    :bind ("\e\e b" . calibredb)
    :config
    (setq calibredb-root-dir "/Users/dingyu/Documents/calibre")
    (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
    (setq calibredb-library-alist '(("~/Books/books")
                                    ))
    )

  ;; bing-dict
  (use-package bing-dict :ensure t)
  (global-set-key (kbd "C-c d") 'bing-dict-brief)
  (setq bing-dict-vocabulary-save t)
  (setq bing-dict-vocabulary-file "~/Dropbox/vocabulary.org")

  ;; google-translate
  ;; (use-package google-translate
  ;;   :defines (google-translate-translation-directions-alist)
  ;;   :bind (("C-c g" . google-translate-smooth-translate))
  ;;   :config
  ;;   (setq google-translate-translation-directions-alist '(("en" . "zh-CN")))
  ;; )  
#+end_src

* Development Tools
** Eglot
** Eglot-Java
#+begin_src emacs-lisp
  (require 'eglot)

    (require 'eglot-java)

    (add-hook 'java-mode-hook #'eglot-java-mode)
    (setq eglot-java-server-install-dir "~/codebase/src/java/eclipse.jdt.ls")
    (setq eglot-java-eclipse-jdt-cache-directory "~/tmp/eglot-eclipse-jdt-cache")
#+end_src

** Database 
#+begin_src emacs-lisp

(require 'ejc-sql)
(setq clomacs-httpd-default-port 8090) ; Use a port other than 8080.
;; Require completion frontend (autocomplete or company). One of them or both.
(require 'ejc-autocomplete)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (auto-complete-mode t)
            (ejc-ac-setup)))

(setq ejc-use-flx t)
(setq ejc-flx-threshold 2)
(require 'ejc-company)
(push 'ejc-company-backend company-backends)
(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (company-mode t)))
(setq ejc-complete-on-dot t)
;; (company-quickhelp-mode t)
(setq ejc-completion-system 'standard)

(add-hook 'ejc-sql-minor-mode-hook
          (lambda ()
            (ejc-eldoc-setup)))
;; Performance & output customization
(add-hook 'ejc-sql-connected-hook
          (lambda ()
            (ejc-set-fetch-size 50)
            (ejc-set-max-rows 50)
            (ejc-set-show-too-many-rows-message t)
            (ejc-set-column-width-limit 25)
            (ejc-set-use-unicode t)))
(setq ejc-result-table-impl 'ejc-result-mode)
;; PostgreSQL example
(ejc-create-connection
 "PostgreSQL-db-connection"
 :classpath (concat "~/.m2/repository/org.postgresql/postgresql/42.6.0/"
                    "postgresql-42.6.0.jar")
 :subprotocol "postgresql"
 :subname "//localhost:5432/postgres"
 :user "postgres"
 :password "postgres")

#+end_src

** Tree-sitter: querying and highlighting
#+begin_src emacs-lisp
  (require 'treesit)
  (setq treesit-extra-load-path '("~/codebase/src/tree-sitter-module/dist/"))
#+end_src
** origami 
https://github.com/gregsexton/origami.el
#+begin_src emacs-lisp
  (use-package s
    :vc (:url "https://github.com/magnars/s.el" :branch master))  
  (require 'dash)
  (use-package origami :ensure t) 
    (with-eval-after-load 'origami
      (define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
      (define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes))
#+end_src
** hideshow-org
#+begin_src emacs-lisp
  (use-package hideshow-org
    :vc (:url "https://github.com/shanecelis/hideshow-org")) 
  (global-set-key (kbd"C-c h") 'hs-org/minor-mode)   
#+end_src

* Emacs Dev Tools
** bug-hunter
#+begin_src emacs-lisp


#+end_src
** Rigrep
#+begin_src emacs-lisp
(use-package rg)
#+end_src
** Magit
** Eshell
#+begin_src emacs-lisp
  ;; eshell
  (use-package xterm-color
    :commands (xterm-color-filter))
  (use-package eshell
    :after xterm-color
    :config
    (setq eshell-scroll-to-bottom-on-input t)
    (define-key eshell-mode-map (kbd "<tab>") #'company-complete)
    (define-key eshell-hist-mode-map (kbd "M-r") #'consult-history)
    (add-hook 'eshell-mode-hook
              (lambda ()
                (setenv "TERM" "xterm-256color")))
    (add-hook 'eshell-before-prompt-hook (setq xterm-color-preserve-properties t))
    (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
    (setq eshell-output-filter-functions
          (remove 'eshell-handle-ansi-color eshell-output-filter-functions)))


  ;; (use-package eshell
  ;;    :config
  ;;    (setq eshell-scroll-to-bottom-on-input t)
  ;;    (setq-local tab-always-indent 'complete)
  ;;    (setq eshell-history-size 10000)
  ;;    (setq eshell-save-history-on-exit t) ;; Enable history saving on exit
  ;;    (setq eshell-hist-ignoredups t) ;; Ignore duplicatesq
  ;;    :hook
  ;;    (eshell-mode . my/eshell-hook))

  (use-package capf-autosuggest
     :hook
     (eshell-mode . capf-autosuggest-mode))

  (defun my/shell-create (name)
     "Create a custom-named eshell buffer with NAME."
     (interactive "sName: ")
     (eshell 'new)
     (let ((new-buffer-name (concat "*eshell-" name "*")))
       (rename-buffer new-buffer-name t)))

  (global-set-key (kbd "C-c s") #'my/shell-create)

#+end_src
* Coding language
** Common
[[https://github.com/Malabarba/aggressive-indent-mode][- aggressive-indent-mode]]
#+begin_src emacs-lisp
(global-aggressive-indent-mode 1)
(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+end_src
** clojure
#+begin_src emacs-lisp
      ;; Enable desired features for all lisp modes
  (require 'clojure-ts-mode)
  (setq clojure-ts-grammar-recipes nil)

  (require 'clojure-mode)
  (setq clojure-indent-style 'always-indent
          clojure-indent-keyword-style 'always-indent
          clojure-enable-indent-specs nil

  (require 'cljsbuild-mode)
  (require 'elein)

  (defun sanityinc/enable-check-parens-on-save ()
        "Run `check-parens' when the current buffer is saved."
        (add-hook 'after-save-hook #'check-parens nil t))

  (defvar sanityinc/lispy-modes-hook
        '(enable-paredit-mode
          sanityinc/enable-check-parens-on-save)
        "Hook run in all Lisp modes.")
  (add-to-list 'sanityinc/lispy-modes-hook 'aggressive-indent-mode)

  (defun sanityinc/lisp-setup ()
        "Enable features useful in any Lisp mode."
        (run-hooks 'sanityinc/lispy-modes-hook))

  (with-eval-after-load 'clojure-mode
      (dolist (m '(clojure-mode-hook clojure-ts-mode-hook))
        (add-hook m 'sanityinc/lisp-setup)))

    (require 'cider)
    (setq nrepl-popup-stacktraces nil)
    (add-hook 'clojure-ts-mode-hook #'cider-mode)

      ;; (with-eval-after-load 'cider
      ;;   (add-hook 'cider-repl-mode-hook 'subword-mode)
      ;;   (add-hook 'cider-repl-mode-hook 'paredit-mode))

    ;; (require 'flycheck-clojure)
    ;; (with-eval-after-load 'clojure-ts-mode
    ;;     (with-eval-after-load 'cider
    ;;       (with-eval-after-load 'flycheck
    ;;         (flycheck-clojure-setup))))

#+end_src

* Misc
** Clearing
#+begin_src emacs-lisp
;; 将原本放在 .emacs.d 目录下的一些配置信息或动态信息，转移到 etc 或 var 子目录里，让配置目录更加简洁清爽
(use-package no-littering
  :ensure t)
#+end_src
(provide 'tools)

* Entertainment
** EAF
#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/codebase/src/emacs-application-framework/")
;; (require 'eaf)

;; (require 'eaf-browser)
;; (require 'eaf-pdf-viewer)
;; (require 'eaf-music-player)
;; (require 'eaf-video-player)
;; (require 'eaf-js-video-player)
;; (require 'eaf-image-viewer)
;; (require 'eaf-rss-reader)
;; (require 'eaf-terminal)
;; (require 'eaf-markdown-previewer)
;; (require 'eaf-org-previewer)
;; (require 'eaf-camera)
;; (require 'eaf-git)
;; (require 'eaf-file-manager)
;; (require 'eaf-mindmap)
;; (require 'eaf-system-monitor)
;; (require 'eaf-file-browser)
;; (require 'eaf-file-sender)
;; (require 'eaf-airshare)
;; (require 'eaf-jupyter)
;; (require 'eaf-2048)
;; (require 'eaf-markmap)
;; (require 'eaf-map)
;; (require 'eaf-demo)
;; (require 'eaf-vue-demo)
;; (require 'eaf-vue-tailwindcss)
;; (require 'eaf-pyqterminal)

#+end_src
** NetEase cloud music
#+begin_src emacs-lisp
(require 'netease-cloud-music)
(require 'netease-cloud-music-ui)       ;If you want to use the default TUI, you should add this line in your configuration.
(require 'netease-cloud-music-comment)  ;If you want comment feature
#+end_src
